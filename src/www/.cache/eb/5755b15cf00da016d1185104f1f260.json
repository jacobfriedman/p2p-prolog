{"id":"node_modules/multiaddr/src/resolvers/index.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multiaddr/package.json","includedInParent":true,"mtime":1604854663745},{"name":"..","loc":{"line":3,"column":26},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multiaddr/src/resolvers/index.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multiaddr/src/index.js"},{"name":"../protocols-table","loc":{"line":4,"column":26},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multiaddr/src/resolvers/index.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multiaddr/src/protocols-table.js"},{"name":"./dns","loc":{"line":15,"column":31},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multiaddr/src/resolvers/index.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multiaddr/src/resolvers/dns.js"}],"generated":{"js":"'use strict'\n\nconst Multiaddr = require('..') // eslint-disable-line  no-unused-vars\nconst protocols = require('../protocols-table')\n\nconst { code: dnsaddrCode } = protocols('dnsaddr')\n\n/**\n * Resolver for dnsaddr addresses.\n *\n * @param {Multiaddr} addr\n * @returns {Promise<Array<string>>}\n */\nasync function dnsaddrResolver (addr) {\n  const { Resolver } = require('./dns')\n  const resolver = new Resolver()\n\n  const peerId = addr.getPeerId()\n  const [, hostname] = addr.stringTuples().find(([proto]) => proto === dnsaddrCode) || []\n\n  const records = await resolver.resolveTxt(`_dnsaddr.${hostname}`)\n  // @ts-ignore\n  let addresses = records.flat().map((a) => a.split('=')[1])\n\n  if (peerId) {\n    addresses = addresses.filter((entry) => entry.includes(peerId))\n  }\n\n  return addresses\n}\n\nmodule.exports = {\n  dnsaddrResolver\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}}],"sources":{"node_modules/multiaddr/src/resolvers/index.js":"'use strict'\n\nconst Multiaddr = require('..') // eslint-disable-line  no-unused-vars\nconst protocols = require('../protocols-table')\n\nconst { code: dnsaddrCode } = protocols('dnsaddr')\n\n/**\n * Resolver for dnsaddr addresses.\n *\n * @param {Multiaddr} addr\n * @returns {Promise<Array<string>>}\n */\nasync function dnsaddrResolver (addr) {\n  const { Resolver } = require('./dns')\n  const resolver = new Resolver()\n\n  const peerId = addr.getPeerId()\n  const [, hostname] = addr.stringTuples().find(([proto]) => proto === dnsaddrCode) || []\n\n  const records = await resolver.resolveTxt(`_dnsaddr.${hostname}`)\n  // @ts-ignore\n  let addresses = records.flat().map((a) => a.split('=')[1])\n\n  if (peerId) {\n    addresses = addresses.filter((entry) => entry.includes(peerId))\n  }\n\n  return addresses\n}\n\nmodule.exports = {\n  dnsaddrResolver\n}\n"},"lineCount":35}},"error":null,"hash":"d0e0e71b513ea0475eb04669368794eb","cacheData":{"env":{}}}