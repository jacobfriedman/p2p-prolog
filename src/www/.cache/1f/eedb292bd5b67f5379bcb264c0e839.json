{"id":"node_modules/multistream-select/src/select.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/package.json","includedInParent":true,"mtime":1604854663745},{"name":"debug","loc":{"line":3,"column":20},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/select.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/debug/src/browser.js"},{"name":"err-code","loc":{"line":4,"column":24},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/select.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/err-code/index.js"},{"name":"./multistream","loc":{"line":5,"column":28},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/select.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/multistream.js"},{"name":"it-handshake","loc":{"line":6,"column":26},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/select.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-handshake/src/index.js"}],"generated":{"js":"'use strict'\n\nconst log = require('debug')('mss:select')\nconst errCode = require('err-code')\nconst multistream = require('./multistream')\nconst handshake = require('it-handshake')\n\nmodule.exports = async (stream, protocols, protocolId) => {\n  protocols = Array.isArray(protocols) ? [...protocols] : [protocols]\n  const { reader, writer, rest, stream: shakeStream } = handshake(stream)\n\n  const protocol = protocols.shift()\n  if (protocolId) {\n    log('select: write [\"%s\", \"%s\"]', protocolId, protocol)\n    multistream.writeAll(writer, [protocolId, protocol])\n  } else {\n    log('select: write \"%s\"', protocol)\n    multistream.write(writer, protocol)\n  }\n\n  let response = (await multistream.read(reader)).toString()\n  log('select: read \"%s\"', response)\n\n  // Read the protocol response if we got the protocolId in return\n  if (response === protocolId) {\n    response = (await multistream.read(reader)).toString()\n    log('select: read \"%s\"', response)\n  }\n\n  // We're done\n  if (response === protocol) {\n    rest()\n    return { stream: shakeStream, protocol }\n  }\n\n  // We haven't gotten a valid ack, try the other protocols\n  for (const protocol of protocols) {\n    log('select: write \"%s\"', protocol)\n    multistream.write(writer, protocol)\n    const response = (await multistream.read(reader)).toString()\n    log('select: read \"%s\" for \"%s\"', response, protocol)\n\n    if (response === protocol) {\n      rest() // End our writer so others can start writing to stream\n      return { stream: shakeStream, protocol }\n    }\n  }\n\n  rest()\n  throw errCode(new Error('protocol selection failed'), 'ERR_UNSUPPORTED_PROTOCOL')\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/multistream-select/src/select.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/multistream-select/src/select.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}}],"sources":{"node_modules/multistream-select/src/select.js":"'use strict'\n\nconst log = require('debug')('mss:select')\nconst errCode = require('err-code')\nconst multistream = require('./multistream')\nconst handshake = require('it-handshake')\n\nmodule.exports = async (stream, protocols, protocolId) => {\n  protocols = Array.isArray(protocols) ? [...protocols] : [protocols]\n  const { reader, writer, rest, stream: shakeStream } = handshake(stream)\n\n  const protocol = protocols.shift()\n  if (protocolId) {\n    log('select: write [\"%s\", \"%s\"]', protocolId, protocol)\n    multistream.writeAll(writer, [protocolId, protocol])\n  } else {\n    log('select: write \"%s\"', protocol)\n    multistream.write(writer, protocol)\n  }\n\n  let response = (await multistream.read(reader)).toString()\n  log('select: read \"%s\"', response)\n\n  // Read the protocol response if we got the protocolId in return\n  if (response === protocolId) {\n    response = (await multistream.read(reader)).toString()\n    log('select: read \"%s\"', response)\n  }\n\n  // We're done\n  if (response === protocol) {\n    rest()\n    return { stream: shakeStream, protocol }\n  }\n\n  // We haven't gotten a valid ack, try the other protocols\n  for (const protocol of protocols) {\n    log('select: write \"%s\"', protocol)\n    multistream.write(writer, protocol)\n    const response = (await multistream.read(reader)).toString()\n    log('select: read \"%s\" for \"%s\"', response, protocol)\n\n    if (response === protocol) {\n      rest() // End our writer so others can start writing to stream\n      return { stream: shakeStream, protocol }\n    }\n  }\n\n  rest()\n  throw errCode(new Error('protocol selection failed'), 'ERR_UNSUPPORTED_PROTOCOL')\n}\n"},"lineCount":52}},"error":null,"hash":"aba5ab06a151e5c4a8f2e9119e6b0b1f","cacheData":{"env":{}}}