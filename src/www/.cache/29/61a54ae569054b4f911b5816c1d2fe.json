{"id":"node_modules/stream-to-it/sink.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/stream-to-it/package.json","includedInParent":true,"mtime":1604854663817},{"name":"get-iterator","loc":{"line":1,"column":28},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/stream-to-it/sink.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/get-iterator/index.js"}],"generated":{"js":"const getIterator = require('get-iterator')\n\nmodule.exports = writable => async source => {\n  source = getIterator(source)\n\n  const maybeEndSource = (source) => {\n    if (typeof source.return === 'function') source.return()\n  }\n\n  let error = null\n  let errCb = null\n  const errorHandler = (err) => {\n    error = err\n    if (errCb) errCb(err)\n    // When the writable errors, try to end the source to exit iteration early\n    maybeEndSource(source)\n  }\n\n  let closeCb = null\n  let closed = false\n  const closeHandler = () => {\n    closed = true\n    if (closeCb) closeCb()\n  }\n\n  let finishCb = null\n  let finished = false\n  const finishHandler = () => {\n    finished = true\n    if (finishCb) finishCb()\n  }\n\n  let drainCb = null\n  const drainHandler = () => {\n    if (drainCb) drainCb()\n  }\n\n  const waitForDrainOrClose = () => {\n    return new Promise((resolve, reject) => {\n      closeCb = drainCb = resolve\n      errCb = reject\n      writable.once('drain', drainHandler)\n    })\n  }\n\n  const waitForDone = () => {\n    // Immediately try to end the source\n    maybeEndSource(source)\n    return new Promise((resolve, reject) => {\n      if (closed || finished || error) return resolve()\n      finishCb = closeCb = resolve\n      errCb = reject\n    })\n  }\n\n  const cleanup = () => {\n    writable.removeListener('error', errorHandler)\n    writable.removeListener('close', closeHandler)\n    writable.removeListener('finish', finishHandler)\n    writable.removeListener('drain', drainHandler)\n  }\n\n  writable.once('error', errorHandler)\n  writable.once('close', closeHandler)\n  writable.once('finish', finishHandler)\n\n  try {\n    for await (const value of source) {\n      if (!writable.writable || writable.destroyed || error) break\n\n      if (writable.write(value) === false) {\n        await waitForDrainOrClose()\n      }\n    }\n  } catch (err) {\n    // error is set by stream error handler so only destroy stream if source threw\n    if (!error) {\n      writable.destroy()\n    }\n\n    // could we be obscuring an error here?\n    error = err\n  }\n\n  try {\n    // We're done writing, end everything (n.b. stream may be destroyed at this point but then this is a no-op)\n    if (writable.writable) {\n      writable.end()\n    }\n\n    // Wait until we close or finish. This supports halfClosed streams\n    await waitForDone()\n\n    // Notify the user an error occurred\n    if (error) throw error\n  } finally {\n    // Clean up listeners\n    cleanup()\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/stream-to-it/sink.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/stream-to-it/sink.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}}],"sources":{"node_modules/stream-to-it/sink.js":"const getIterator = require('get-iterator')\n\nmodule.exports = writable => async source => {\n  source = getIterator(source)\n\n  const maybeEndSource = (source) => {\n    if (typeof source.return === 'function') source.return()\n  }\n\n  let error = null\n  let errCb = null\n  const errorHandler = (err) => {\n    error = err\n    if (errCb) errCb(err)\n    // When the writable errors, try to end the source to exit iteration early\n    maybeEndSource(source)\n  }\n\n  let closeCb = null\n  let closed = false\n  const closeHandler = () => {\n    closed = true\n    if (closeCb) closeCb()\n  }\n\n  let finishCb = null\n  let finished = false\n  const finishHandler = () => {\n    finished = true\n    if (finishCb) finishCb()\n  }\n\n  let drainCb = null\n  const drainHandler = () => {\n    if (drainCb) drainCb()\n  }\n\n  const waitForDrainOrClose = () => {\n    return new Promise((resolve, reject) => {\n      closeCb = drainCb = resolve\n      errCb = reject\n      writable.once('drain', drainHandler)\n    })\n  }\n\n  const waitForDone = () => {\n    // Immediately try to end the source\n    maybeEndSource(source)\n    return new Promise((resolve, reject) => {\n      if (closed || finished || error) return resolve()\n      finishCb = closeCb = resolve\n      errCb = reject\n    })\n  }\n\n  const cleanup = () => {\n    writable.removeListener('error', errorHandler)\n    writable.removeListener('close', closeHandler)\n    writable.removeListener('finish', finishHandler)\n    writable.removeListener('drain', drainHandler)\n  }\n\n  writable.once('error', errorHandler)\n  writable.once('close', closeHandler)\n  writable.once('finish', finishHandler)\n\n  try {\n    for await (const value of source) {\n      if (!writable.writable || writable.destroyed || error) break\n\n      if (writable.write(value) === false) {\n        await waitForDrainOrClose()\n      }\n    }\n  } catch (err) {\n    // error is set by stream error handler so only destroy stream if source threw\n    if (!error) {\n      writable.destroy()\n    }\n\n    // could we be obscuring an error here?\n    error = err\n  }\n\n  try {\n    // We're done writing, end everything (n.b. stream may be destroyed at this point but then this is a no-op)\n    if (writable.writable) {\n      writable.end()\n    }\n\n    // Wait until we close or finish. This supports halfClosed streams\n    await waitForDone()\n\n    // Notify the user an error occurred\n    if (error) throw error\n  } finally {\n    // Clean up listeners\n    cleanup()\n  }\n}\n"},"lineCount":101}},"error":null,"hash":"15620f4e0fb0b1e448f752dc319afeae","cacheData":{"env":{}}}