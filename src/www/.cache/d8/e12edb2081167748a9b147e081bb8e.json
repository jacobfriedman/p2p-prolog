{"id":"node_modules/abortable-iterator/index.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/abortable-iterator/package.json","includedInParent":true,"mtime":1604854663665},{"name":"get-iterator","loc":{"line":1,"column":28},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/abortable-iterator/index.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/get-iterator/index.js"},{"name":"./AbortError","loc":{"line":2,"column":27},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/abortable-iterator/index.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/abortable-iterator/AbortError.js"}],"generated":{"js":"const getIterator = require('get-iterator')\nconst AbortError = require('./AbortError')\n\n// Wrap an iterator to make it abortable, allow cleanup when aborted via onAbort\nconst toAbortableSource = (source, signal, options) => (\n  toMultiAbortableSource(source, Array.isArray(signal) ? signal : [{ signal, options }])\n)\n\nconst toMultiAbortableSource = (source, signals) => {\n  source = getIterator(source)\n  signals = signals.map(({ signal, options }) => ({ signal, options: options || {} }))\n\n  async function * abortable () {\n    let nextAbortHandler\n    const abortHandler = () => {\n      if (nextAbortHandler) nextAbortHandler()\n    }\n\n    for (const { signal } of signals) {\n      signal.addEventListener('abort', abortHandler)\n    }\n\n    while (true) {\n      let result\n      try {\n        for (const { signal, options } of signals) {\n          if (signal.aborted) {\n            const { abortMessage, abortCode } = options\n            throw new AbortError(abortMessage, abortCode)\n          }\n        }\n\n        const abort = new Promise((resolve, reject) => {\n          nextAbortHandler = () => {\n            const { options } = signals.find(({ signal }) => signal.aborted)\n            const { abortMessage, abortCode } = options\n            reject(new AbortError(abortMessage, abortCode))\n          }\n        })\n\n        // Race the iterator and the abort signals\n        result = await Promise.race([abort, source.next()])\n        nextAbortHandler = null\n      } catch (err) {\n        for (const { signal } of signals) {\n          signal.removeEventListener('abort', abortHandler)\n        }\n\n        // Might not have been aborted by a known signal\n        const aborter = signals.find(({ signal }) => signal.aborted)\n        const isKnownAborter = err.type === 'aborted' && aborter\n\n        if (isKnownAborter && aborter.options.onAbort) {\n          // Do any custom abort handling for the iterator\n          await aborter.options.onAbort(source)\n        }\n\n        // End the iterator if it is a generator\n        if (typeof source.return === 'function') {\n          await source.return()\n        }\n\n        if (isKnownAborter && aborter.options.returnOnAbort) {\n          return\n        }\n\n        throw err\n      }\n\n      if (result.done) break\n      yield result.value\n    }\n\n    for (const { signal } of signals) {\n      signal.removeEventListener('abort', abortHandler)\n    }\n  }\n\n  return abortable()\n}\n\nconst toAbortableSink = (sink, signal, options) => (\n  toMultiAbortableSink(sink, Array.isArray(signal) ? signal : [{ signal, options }])\n)\n\nconst toMultiAbortableSink = (sink, signals) => source => (\n  sink(toMultiAbortableSource(source, signals))\n)\n\nconst toAbortableDuplex = (duplex, signal, options) => (\n  toMultiAbortableDuplex(duplex, Array.isArray(signal) ? signal : [{ signal, options }])\n)\n\nconst toMultiAbortableDuplex = (duplex, signals) => ({\n  sink: toMultiAbortableSink(duplex.sink, signals),\n  source: toMultiAbortableSource(duplex.source, signals)\n})\n\nmodule.exports = toAbortableSource\nmodule.exports.AbortError = AbortError\nmodule.exports.source = toAbortableSource\nmodule.exports.sink = toAbortableSink\nmodule.exports.transform = toAbortableSink\nmodule.exports.duplex = toAbortableDuplex\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/abortable-iterator/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/abortable-iterator/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}}],"sources":{"node_modules/abortable-iterator/index.js":"const getIterator = require('get-iterator')\nconst AbortError = require('./AbortError')\n\n// Wrap an iterator to make it abortable, allow cleanup when aborted via onAbort\nconst toAbortableSource = (source, signal, options) => (\n  toMultiAbortableSource(source, Array.isArray(signal) ? signal : [{ signal, options }])\n)\n\nconst toMultiAbortableSource = (source, signals) => {\n  source = getIterator(source)\n  signals = signals.map(({ signal, options }) => ({ signal, options: options || {} }))\n\n  async function * abortable () {\n    let nextAbortHandler\n    const abortHandler = () => {\n      if (nextAbortHandler) nextAbortHandler()\n    }\n\n    for (const { signal } of signals) {\n      signal.addEventListener('abort', abortHandler)\n    }\n\n    while (true) {\n      let result\n      try {\n        for (const { signal, options } of signals) {\n          if (signal.aborted) {\n            const { abortMessage, abortCode } = options\n            throw new AbortError(abortMessage, abortCode)\n          }\n        }\n\n        const abort = new Promise((resolve, reject) => {\n          nextAbortHandler = () => {\n            const { options } = signals.find(({ signal }) => signal.aborted)\n            const { abortMessage, abortCode } = options\n            reject(new AbortError(abortMessage, abortCode))\n          }\n        })\n\n        // Race the iterator and the abort signals\n        result = await Promise.race([abort, source.next()])\n        nextAbortHandler = null\n      } catch (err) {\n        for (const { signal } of signals) {\n          signal.removeEventListener('abort', abortHandler)\n        }\n\n        // Might not have been aborted by a known signal\n        const aborter = signals.find(({ signal }) => signal.aborted)\n        const isKnownAborter = err.type === 'aborted' && aborter\n\n        if (isKnownAborter && aborter.options.onAbort) {\n          // Do any custom abort handling for the iterator\n          await aborter.options.onAbort(source)\n        }\n\n        // End the iterator if it is a generator\n        if (typeof source.return === 'function') {\n          await source.return()\n        }\n\n        if (isKnownAborter && aborter.options.returnOnAbort) {\n          return\n        }\n\n        throw err\n      }\n\n      if (result.done) break\n      yield result.value\n    }\n\n    for (const { signal } of signals) {\n      signal.removeEventListener('abort', abortHandler)\n    }\n  }\n\n  return abortable()\n}\n\nconst toAbortableSink = (sink, signal, options) => (\n  toMultiAbortableSink(sink, Array.isArray(signal) ? signal : [{ signal, options }])\n)\n\nconst toMultiAbortableSink = (sink, signals) => source => (\n  sink(toMultiAbortableSource(source, signals))\n)\n\nconst toAbortableDuplex = (duplex, signal, options) => (\n  toMultiAbortableDuplex(duplex, Array.isArray(signal) ? signal : [{ signal, options }])\n)\n\nconst toMultiAbortableDuplex = (duplex, signals) => ({\n  sink: toMultiAbortableSink(duplex.sink, signals),\n  source: toMultiAbortableSource(duplex.source, signals)\n})\n\nmodule.exports = toAbortableSource\nmodule.exports.AbortError = AbortError\nmodule.exports.source = toAbortableSource\nmodule.exports.sink = toAbortableSink\nmodule.exports.transform = toAbortableSink\nmodule.exports.duplex = toAbortableDuplex\n"},"lineCount":105}},"error":null,"hash":"751af9a2325c8ee3c743d1f43160277c","cacheData":{"env":{}}}