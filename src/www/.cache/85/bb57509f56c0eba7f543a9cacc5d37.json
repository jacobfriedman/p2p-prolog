{"id":"node_modules/libp2p-mplex/src/coder/decode.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/package.json","includedInParent":true,"mtime":1604854753633},{"name":"varint","loc":{"line":3,"column":23},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/coder/decode.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/varint/index.js"},{"name":"bl/BufferList","loc":{"line":4,"column":27},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/coder/decode.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/bl/BufferList.js"}],"generated":{"js":"'use strict'\n\nconst varint = require('varint')\nconst BufferList = require('bl/BufferList')\n\n// Decode a chunk and yield an _array_ of decoded messages\nmodule.exports = source => (async function * decode () {\n  const decoder = new Decoder()\n  for await (const chunk of source) {\n    const msgs = decoder.write(chunk)\n    if (msgs.length) yield msgs\n  }\n})()\n\nclass Decoder {\n  constructor () {\n    this._buffer = new BufferList()\n    // optimization to allow varint to take a BufferList (well a proxy to)\n    this._bufferProxy = new Proxy({}, {\n      get: (_, prop) => prop[0] === 'l' ? this._buffer[prop] : this._buffer.get(parseInt(prop))\n    })\n    this._headerInfo = null\n  }\n\n  /**\n   * @param {Uint8Array|BufferList} chunk\n   * @returns {object[]} An array of message objects\n   */\n  write (chunk) {\n    if (!chunk || !chunk.length) return []\n\n    this._buffer.append(chunk)\n    const msgs = []\n\n    while (true) {\n      if (!this._headerInfo) {\n        try {\n          this._headerInfo = this._decodeHeader(this._bufferProxy)\n        } catch (_) {\n          break // We haven't received enough data yet\n        }\n      }\n\n      const { id, type, length, offset } = this._headerInfo\n      const bufferedDataLength = this._buffer.length - offset\n\n      if (bufferedDataLength < length) break // not enough data yet\n\n      msgs.push({ id, type, data: this._buffer.shallowSlice(offset, offset + length) })\n\n      this._buffer.consume(offset + length)\n      this._headerInfo = null\n    }\n\n    return msgs\n  }\n\n  /**\n   * Attempts to decode the message header from the buffer\n   *\n   * @private\n   * @param {Uint8Array} data\n   * @returns {*} message header (id, type, offset, length)\n   */\n  _decodeHeader (data) {\n    const h = varint.decode(data)\n    let offset = varint.decode.bytes\n    const length = varint.decode(data, offset)\n    offset += varint.decode.bytes\n    return { id: h >> 3, type: h & 7, offset, length }\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/decode.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}}],"sources":{"node_modules/libp2p-mplex/src/coder/decode.js":"'use strict'\n\nconst varint = require('varint')\nconst BufferList = require('bl/BufferList')\n\n// Decode a chunk and yield an _array_ of decoded messages\nmodule.exports = source => (async function * decode () {\n  const decoder = new Decoder()\n  for await (const chunk of source) {\n    const msgs = decoder.write(chunk)\n    if (msgs.length) yield msgs\n  }\n})()\n\nclass Decoder {\n  constructor () {\n    this._buffer = new BufferList()\n    // optimization to allow varint to take a BufferList (well a proxy to)\n    this._bufferProxy = new Proxy({}, {\n      get: (_, prop) => prop[0] === 'l' ? this._buffer[prop] : this._buffer.get(parseInt(prop))\n    })\n    this._headerInfo = null\n  }\n\n  /**\n   * @param {Uint8Array|BufferList} chunk\n   * @returns {object[]} An array of message objects\n   */\n  write (chunk) {\n    if (!chunk || !chunk.length) return []\n\n    this._buffer.append(chunk)\n    const msgs = []\n\n    while (true) {\n      if (!this._headerInfo) {\n        try {\n          this._headerInfo = this._decodeHeader(this._bufferProxy)\n        } catch (_) {\n          break // We haven't received enough data yet\n        }\n      }\n\n      const { id, type, length, offset } = this._headerInfo\n      const bufferedDataLength = this._buffer.length - offset\n\n      if (bufferedDataLength < length) break // not enough data yet\n\n      msgs.push({ id, type, data: this._buffer.shallowSlice(offset, offset + length) })\n\n      this._buffer.consume(offset + length)\n      this._headerInfo = null\n    }\n\n    return msgs\n  }\n\n  /**\n   * Attempts to decode the message header from the buffer\n   *\n   * @private\n   * @param {Uint8Array} data\n   * @returns {*} message header (id, type, offset, length)\n   */\n  _decodeHeader (data) {\n    const h = varint.decode(data)\n    let offset = varint.decode.bytes\n    const length = varint.decode(data, offset)\n    offset += varint.decode.bytes\n    return { id: h >> 3, type: h & 7, offset, length }\n  }\n}\n"},"lineCount":73}},"error":null,"hash":"4e76b32e4a0c016016e7c3b3a4b58ca4","cacheData":{"env":{}}}