{"id":"node_modules/libp2p-websockets/src/listener.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-websockets/package.json","includedInParent":true,"mtime":1604854741185},{"name":"events","loc":{"line":3,"column":29},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-websockets/src/listener.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/events/events.js"},{"name":"os","loc":{"line":4,"column":19},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-websockets/src/listener.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/os-browserify/browser.js"},{"name":"multiaddr","loc":{"line":5,"column":26},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-websockets/src/listener.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multiaddr/src/index.js"},{"name":"it-ws","loc":{"line":6,"column":33},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-websockets/src/listener.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-ws/index.js"},{"name":"debug","loc":{"line":7,"column":22},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-websockets/src/listener.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/debug/src/browser.js"},{"name":"./socket-to-conn","loc":{"line":11,"column":29},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-websockets/src/listener.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-websockets/src/socket-to-conn.js"}],"generated":{"js":"'use strict'\n\nconst EventEmitter = require('events')\nconst os = require('os')\nconst multiaddr = require('multiaddr')\nconst { createServer } = require('it-ws')\nconst debug = require('debug')\nconst log = debug('libp2p:websockets:listener')\nlog.error = debug('libp2p:websockets:listener:error')\n\nconst toConnection = require('./socket-to-conn')\n\nmodule.exports = ({ handler, upgrader }, options = {}) => {\n  const listener = new EventEmitter()\n\n  const server = createServer(options, async (stream) => {\n    let maConn, conn\n\n    try {\n      maConn = toConnection(stream)\n      log('new inbound connection %s', maConn.remoteAddr)\n      conn = await upgrader.upgradeInbound(maConn)\n    } catch (err) {\n      log.error('inbound connection failed to upgrade', err)\n      return maConn && maConn.close()\n    }\n\n    log('inbound connection %s upgraded', maConn.remoteAddr)\n\n    trackConn(server, maConn)\n\n    if (handler) handler(conn)\n    listener.emit('connection', conn)\n  })\n\n  server\n    .on('listening', () => listener.emit('listening'))\n    .on('error', err => listener.emit('error', err))\n    .on('close', () => listener.emit('close'))\n\n  // Keep track of open connections to destroy in case of timeout\n  server.__connections = []\n\n  let listeningMultiaddr\n\n  listener.close = () => {\n    server.__connections.forEach(maConn => maConn.close())\n    return server.close()\n  }\n\n  listener.listen = (ma) => {\n    listeningMultiaddr = ma\n\n    return server.listen(ma.toOptions())\n  }\n\n  listener.getAddrs = () => {\n    const multiaddrs = []\n    const address = server.address()\n\n    if (!address) {\n      throw new Error('Listener is not ready yet')\n    }\n\n    const ipfsId = listeningMultiaddr.getPeerId()\n\n    // Because TCP will only return the IPv6 version\n    // we need to capture from the passed multiaddr\n    if (listeningMultiaddr.toString().indexOf('ip4') !== -1) {\n      let m = listeningMultiaddr.decapsulate('tcp')\n      m = m.encapsulate('/tcp/' + address.port + '/ws')\n      if (listeningMultiaddr.getPeerId()) {\n        m = m.encapsulate('/p2p/' + ipfsId)\n      }\n\n      if (m.toString().indexOf('0.0.0.0') !== -1) {\n        const netInterfaces = os.networkInterfaces()\n        Object.keys(netInterfaces).forEach((niKey) => {\n          netInterfaces[niKey].forEach((ni) => {\n            if (ni.family === 'IPv4') {\n              multiaddrs.push(multiaddr(m.toString().replace('0.0.0.0', ni.address)))\n            }\n          })\n        })\n      } else {\n        multiaddrs.push(m)\n      }\n    }\n\n    return multiaddrs\n  }\n\n  return listener\n}\n\nfunction trackConn (server, maConn) {\n  server.__connections.push(maConn)\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/libp2p-websockets/src/listener.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}}],"sources":{"node_modules/libp2p-websockets/src/listener.js":"'use strict'\n\nconst EventEmitter = require('events')\nconst os = require('os')\nconst multiaddr = require('multiaddr')\nconst { createServer } = require('it-ws')\nconst debug = require('debug')\nconst log = debug('libp2p:websockets:listener')\nlog.error = debug('libp2p:websockets:listener:error')\n\nconst toConnection = require('./socket-to-conn')\n\nmodule.exports = ({ handler, upgrader }, options = {}) => {\n  const listener = new EventEmitter()\n\n  const server = createServer(options, async (stream) => {\n    let maConn, conn\n\n    try {\n      maConn = toConnection(stream)\n      log('new inbound connection %s', maConn.remoteAddr)\n      conn = await upgrader.upgradeInbound(maConn)\n    } catch (err) {\n      log.error('inbound connection failed to upgrade', err)\n      return maConn && maConn.close()\n    }\n\n    log('inbound connection %s upgraded', maConn.remoteAddr)\n\n    trackConn(server, maConn)\n\n    if (handler) handler(conn)\n    listener.emit('connection', conn)\n  })\n\n  server\n    .on('listening', () => listener.emit('listening'))\n    .on('error', err => listener.emit('error', err))\n    .on('close', () => listener.emit('close'))\n\n  // Keep track of open connections to destroy in case of timeout\n  server.__connections = []\n\n  let listeningMultiaddr\n\n  listener.close = () => {\n    server.__connections.forEach(maConn => maConn.close())\n    return server.close()\n  }\n\n  listener.listen = (ma) => {\n    listeningMultiaddr = ma\n\n    return server.listen(ma.toOptions())\n  }\n\n  listener.getAddrs = () => {\n    const multiaddrs = []\n    const address = server.address()\n\n    if (!address) {\n      throw new Error('Listener is not ready yet')\n    }\n\n    const ipfsId = listeningMultiaddr.getPeerId()\n\n    // Because TCP will only return the IPv6 version\n    // we need to capture from the passed multiaddr\n    if (listeningMultiaddr.toString().indexOf('ip4') !== -1) {\n      let m = listeningMultiaddr.decapsulate('tcp')\n      m = m.encapsulate('/tcp/' + address.port + '/ws')\n      if (listeningMultiaddr.getPeerId()) {\n        m = m.encapsulate('/p2p/' + ipfsId)\n      }\n\n      if (m.toString().indexOf('0.0.0.0') !== -1) {\n        const netInterfaces = os.networkInterfaces()\n        Object.keys(netInterfaces).forEach((niKey) => {\n          netInterfaces[niKey].forEach((ni) => {\n            if (ni.family === 'IPv4') {\n              multiaddrs.push(multiaddr(m.toString().replace('0.0.0.0', ni.address)))\n            }\n          })\n        })\n      } else {\n        multiaddrs.push(m)\n      }\n    }\n\n    return multiaddrs\n  }\n\n  return listener\n}\n\nfunction trackConn (server, maConn) {\n  server.__connections.push(maConn)\n}\n"},"lineCount":99}},"error":null,"hash":"1e732485c8d10d0e789626e2ac3b9dba","cacheData":{"env":{}}}