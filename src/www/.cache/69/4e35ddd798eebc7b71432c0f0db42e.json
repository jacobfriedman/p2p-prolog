{"id":"node_modules/interface-datastore/src/utils.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/interface-datastore/package.json","includedInParent":true,"mtime":1604854663745},{"name":"ipfs-utils/src/temp-dir","loc":{"line":3,"column":24},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/interface-datastore/src/utils.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/ipfs-utils/src/temp-dir.browser.js"},{"name":"ipfs-utils/src/text-encoder","loc":{"line":4,"column":28},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/interface-datastore/src/utils.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/ipfs-utils/src/text-encoder.browser.js"},{"name":"ipfs-utils/src/text-decoder","loc":{"line":5,"column":28},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/interface-datastore/src/utils.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/ipfs-utils/src/text-decoder.browser.js"}],"generated":{"js":"'use strict'\n\nconst tempdir = require('ipfs-utils/src/temp-dir')\nconst TextEncoder = require('ipfs-utils/src/text-encoder')\nconst TextDecoder = require('ipfs-utils/src/text-decoder')\n\nexports.utf8Encoder = new TextEncoder('utf8')\nexports.utf8Decoder = new TextDecoder('utf8')\n\nexports.filter = (iterable, filterer) => {\n  return (async function * () {\n    for await (const value of iterable) {\n      const keep = await filterer(value)\n      if (!keep) continue\n      yield value\n    }\n  })()\n}\n\n// Not just sort, because the sorter is given all the values and should return\n// them all sorted\nexports.sortAll = (iterable, sorter) => {\n  return (async function * () {\n    let values = []\n    for await (const value of iterable) values.push(value)\n    values = await sorter(values)\n    for (const value of values) yield value\n  })()\n}\n\nexports.take = (iterable, n) => {\n  return (async function * () {\n    if (n <= 0) return\n    let i = 0\n    for await (const value of iterable) {\n      yield value\n      i++\n      if (i >= n) return\n    }\n  })()\n}\n\nexports.map = (iterable, mapper) => {\n  return (async function * () {\n    for await (const value of iterable) {\n      yield mapper(value)\n    }\n  })()\n}\n\nexports.replaceStartWith = function (s, r) {\n  const matcher = new RegExp('^' + r)\n  return s.replace(matcher, '')\n}\n\nexports.tmpdir = tempdir\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/interface-datastore/src/utils.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}}],"sources":{"node_modules/interface-datastore/src/utils.js":"'use strict'\n\nconst tempdir = require('ipfs-utils/src/temp-dir')\nconst TextEncoder = require('ipfs-utils/src/text-encoder')\nconst TextDecoder = require('ipfs-utils/src/text-decoder')\n\nexports.utf8Encoder = new TextEncoder('utf8')\nexports.utf8Decoder = new TextDecoder('utf8')\n\nexports.filter = (iterable, filterer) => {\n  return (async function * () {\n    for await (const value of iterable) {\n      const keep = await filterer(value)\n      if (!keep) continue\n      yield value\n    }\n  })()\n}\n\n// Not just sort, because the sorter is given all the values and should return\n// them all sorted\nexports.sortAll = (iterable, sorter) => {\n  return (async function * () {\n    let values = []\n    for await (const value of iterable) values.push(value)\n    values = await sorter(values)\n    for (const value of values) yield value\n  })()\n}\n\nexports.take = (iterable, n) => {\n  return (async function * () {\n    if (n <= 0) return\n    let i = 0\n    for await (const value of iterable) {\n      yield value\n      i++\n      if (i >= n) return\n    }\n  })()\n}\n\nexports.map = (iterable, mapper) => {\n  return (async function * () {\n    for await (const value of iterable) {\n      yield mapper(value)\n    }\n  })()\n}\n\nexports.replaceStartWith = function (s, r) {\n  const matcher = new RegExp('^' + r)\n  return s.replace(matcher, '')\n}\n\nexports.tmpdir = tempdir\n"},"lineCount":57}},"error":null,"hash":"353ba98c07ad6388425a4979da07d620","cacheData":{"env":{}}}