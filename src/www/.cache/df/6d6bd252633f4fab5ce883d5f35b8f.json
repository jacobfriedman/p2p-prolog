{"id":"node_modules/queue-microtask/index.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/queue-microtask/package.json","includedInParent":true,"mtime":1604854749045}],"generated":{"js":"/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask.bind(globalThis)\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/queue-microtask/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/queue-microtask/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/queue-microtask/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/queue-microtask/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/queue-microtask/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/queue-microtask/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/queue-microtask/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/queue-microtask/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/queue-microtask/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/queue-microtask/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}}],"sources":{"node_modules/queue-microtask/index.js":"/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask.bind(globalThis)\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n"},"lineCount":10}},"error":null,"hash":"b26d35ffaa9c015f583171808a880d8d","cacheData":{"env":{}}}