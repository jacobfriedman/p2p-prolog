{"id":"node_modules/sprintf-js/src/sprintf.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/sprintf-js/package.json","includedInParent":true,"mtime":1604854663817}],"generated":{"js":"var define;\n/* global window, exports, define */\n\n!function() {\n    'use strict'\n\n    var re = {\n        not_string: /[^s]/,\n        not_bool: /[^t]/,\n        not_type: /[^T]/,\n        not_primitive: /[^v]/,\n        number: /[diefg]/,\n        numeric_arg: /[bcdiefguxX]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[+-]/\n    }\n\n    function sprintf(key) {\n        // `arguments` is not an array, but should be fine for this call\n        return sprintf_format(sprintf_parse(key), arguments)\n    }\n\n    function vsprintf(fmt, argv) {\n        return sprintf.apply(null, [fmt].concat(argv || []))\n    }\n\n    function sprintf_format(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, ph, pad, pad_character, pad_length, is_positive, sign\n        for (i = 0; i < tree_length; i++) {\n            if (typeof parse_tree[i] === 'string') {\n                output += parse_tree[i]\n            }\n            else if (typeof parse_tree[i] === 'object') {\n                ph = parse_tree[i] // convenience purposes only\n                if (ph.keys) { // keyword argument\n                    arg = argv[cursor]\n                    for (k = 0; k < ph.keys.length; k++) {\n                        if (arg == undefined) {\n                            throw new Error(sprintf('[sprintf] Cannot access property \"%s\" of undefined value \"%s\"', ph.keys[k], ph.keys[k-1]))\n                        }\n                        arg = arg[ph.keys[k]]\n                    }\n                }\n                else if (ph.param_no) { // positional argument (explicit)\n                    arg = argv[ph.param_no]\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++]\n                }\n\n                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {\n                    arg = arg()\n                }\n\n                if (re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {\n                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))\n                }\n\n                if (re.number.test(ph.type)) {\n                    is_positive = arg >= 0\n                }\n\n                switch (ph.type) {\n                    case 'b':\n                        arg = parseInt(arg, 10).toString(2)\n                        break\n                    case 'c':\n                        arg = String.fromCharCode(parseInt(arg, 10))\n                        break\n                    case 'd':\n                    case 'i':\n                        arg = parseInt(arg, 10)\n                        break\n                    case 'j':\n                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0)\n                        break\n                    case 'e':\n                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential()\n                        break\n                    case 'f':\n                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg)\n                        break\n                    case 'g':\n                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg)\n                        break\n                    case 'o':\n                        arg = (parseInt(arg, 10) >>> 0).toString(8)\n                        break\n                    case 's':\n                        arg = String(arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 't':\n                        arg = String(!!arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'T':\n                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'u':\n                        arg = parseInt(arg, 10) >>> 0\n                        break\n                    case 'v':\n                        arg = arg.valueOf()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'x':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16)\n                        break\n                    case 'X':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()\n                        break\n                }\n                if (re.json.test(ph.type)) {\n                    output += arg\n                }\n                else {\n                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {\n                        sign = is_positive ? '+' : '-'\n                        arg = arg.toString().replace(re.sign, '')\n                    }\n                    else {\n                        sign = ''\n                    }\n                    pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' '\n                    pad_length = ph.width - (sign + arg).length\n                    pad = ph.width ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''\n                    output += ph.align ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)\n                }\n            }\n        }\n        return output\n    }\n\n    var sprintf_cache = Object.create(null)\n\n    function sprintf_parse(fmt) {\n        if (sprintf_cache[fmt]) {\n            return sprintf_cache[fmt]\n        }\n\n        var _fmt = fmt, match, parse_tree = [], arg_names = 0\n        while (_fmt) {\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree.push(match[0])\n            }\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree.push('%')\n            }\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1\n                    var field_list = [], replacement_field = match[2], field_match = []\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list.push(field_match[1])\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else {\n                                throw new SyntaxError('[sprintf] failed to parse named argument key')\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError('[sprintf] failed to parse named argument key')\n                    }\n                    match[2] = field_list\n                }\n                else {\n                    arg_names |= 2\n                }\n                if (arg_names === 3) {\n                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')\n                }\n\n                parse_tree.push(\n                    {\n                        placeholder: match[0],\n                        param_no:    match[1],\n                        keys:        match[2],\n                        sign:        match[3],\n                        pad_char:    match[4],\n                        align:       match[5],\n                        width:       match[6],\n                        precision:   match[7],\n                        type:        match[8]\n                    }\n                )\n            }\n            else {\n                throw new SyntaxError('[sprintf] unexpected placeholder')\n            }\n            _fmt = _fmt.substring(match[0].length)\n        }\n        return sprintf_cache[fmt] = parse_tree\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    /* eslint-disable quote-props */\n    if (typeof exports !== 'undefined') {\n        exports['sprintf'] = sprintf\n        exports['vsprintf'] = vsprintf\n    }\n    if (typeof window !== 'undefined') {\n        window['sprintf'] = sprintf\n        window['vsprintf'] = vsprintf\n\n        if (typeof define === 'function' && define['amd']) {\n            define(function() {\n                return {\n                    'sprintf': sprintf,\n                    'vsprintf': vsprintf\n                }\n            })\n        }\n    }\n    /* eslint-enable quote-props */\n}(); // eslint-disable-line\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/sprintf-js/src/sprintf.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}}],"sources":{"node_modules/sprintf-js/src/sprintf.js":"/* global window, exports, define */\n\n!function() {\n    'use strict'\n\n    var re = {\n        not_string: /[^s]/,\n        not_bool: /[^t]/,\n        not_type: /[^T]/,\n        not_primitive: /[^v]/,\n        number: /[diefg]/,\n        numeric_arg: /[bcdiefguxX]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[+-]/\n    }\n\n    function sprintf(key) {\n        // `arguments` is not an array, but should be fine for this call\n        return sprintf_format(sprintf_parse(key), arguments)\n    }\n\n    function vsprintf(fmt, argv) {\n        return sprintf.apply(null, [fmt].concat(argv || []))\n    }\n\n    function sprintf_format(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, ph, pad, pad_character, pad_length, is_positive, sign\n        for (i = 0; i < tree_length; i++) {\n            if (typeof parse_tree[i] === 'string') {\n                output += parse_tree[i]\n            }\n            else if (typeof parse_tree[i] === 'object') {\n                ph = parse_tree[i] // convenience purposes only\n                if (ph.keys) { // keyword argument\n                    arg = argv[cursor]\n                    for (k = 0; k < ph.keys.length; k++) {\n                        if (arg == undefined) {\n                            throw new Error(sprintf('[sprintf] Cannot access property \"%s\" of undefined value \"%s\"', ph.keys[k], ph.keys[k-1]))\n                        }\n                        arg = arg[ph.keys[k]]\n                    }\n                }\n                else if (ph.param_no) { // positional argument (explicit)\n                    arg = argv[ph.param_no]\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++]\n                }\n\n                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {\n                    arg = arg()\n                }\n\n                if (re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {\n                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))\n                }\n\n                if (re.number.test(ph.type)) {\n                    is_positive = arg >= 0\n                }\n\n                switch (ph.type) {\n                    case 'b':\n                        arg = parseInt(arg, 10).toString(2)\n                        break\n                    case 'c':\n                        arg = String.fromCharCode(parseInt(arg, 10))\n                        break\n                    case 'd':\n                    case 'i':\n                        arg = parseInt(arg, 10)\n                        break\n                    case 'j':\n                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0)\n                        break\n                    case 'e':\n                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential()\n                        break\n                    case 'f':\n                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg)\n                        break\n                    case 'g':\n                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg)\n                        break\n                    case 'o':\n                        arg = (parseInt(arg, 10) >>> 0).toString(8)\n                        break\n                    case 's':\n                        arg = String(arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 't':\n                        arg = String(!!arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'T':\n                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'u':\n                        arg = parseInt(arg, 10) >>> 0\n                        break\n                    case 'v':\n                        arg = arg.valueOf()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'x':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16)\n                        break\n                    case 'X':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()\n                        break\n                }\n                if (re.json.test(ph.type)) {\n                    output += arg\n                }\n                else {\n                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {\n                        sign = is_positive ? '+' : '-'\n                        arg = arg.toString().replace(re.sign, '')\n                    }\n                    else {\n                        sign = ''\n                    }\n                    pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' '\n                    pad_length = ph.width - (sign + arg).length\n                    pad = ph.width ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''\n                    output += ph.align ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)\n                }\n            }\n        }\n        return output\n    }\n\n    var sprintf_cache = Object.create(null)\n\n    function sprintf_parse(fmt) {\n        if (sprintf_cache[fmt]) {\n            return sprintf_cache[fmt]\n        }\n\n        var _fmt = fmt, match, parse_tree = [], arg_names = 0\n        while (_fmt) {\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree.push(match[0])\n            }\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree.push('%')\n            }\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1\n                    var field_list = [], replacement_field = match[2], field_match = []\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list.push(field_match[1])\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else {\n                                throw new SyntaxError('[sprintf] failed to parse named argument key')\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError('[sprintf] failed to parse named argument key')\n                    }\n                    match[2] = field_list\n                }\n                else {\n                    arg_names |= 2\n                }\n                if (arg_names === 3) {\n                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')\n                }\n\n                parse_tree.push(\n                    {\n                        placeholder: match[0],\n                        param_no:    match[1],\n                        keys:        match[2],\n                        sign:        match[3],\n                        pad_char:    match[4],\n                        align:       match[5],\n                        width:       match[6],\n                        precision:   match[7],\n                        type:        match[8]\n                    }\n                )\n            }\n            else {\n                throw new SyntaxError('[sprintf] unexpected placeholder')\n            }\n            _fmt = _fmt.substring(match[0].length)\n        }\n        return sprintf_cache[fmt] = parse_tree\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    /* eslint-disable quote-props */\n    if (typeof exports !== 'undefined') {\n        exports['sprintf'] = sprintf\n        exports['vsprintf'] = vsprintf\n    }\n    if (typeof window !== 'undefined') {\n        window['sprintf'] = sprintf\n        window['vsprintf'] = vsprintf\n\n        if (typeof define === 'function' && define['amd']) {\n            define(function() {\n                return {\n                    'sprintf': sprintf,\n                    'vsprintf': vsprintf\n                }\n            })\n        }\n    }\n    /* eslint-enable quote-props */\n}(); // eslint-disable-line\n"},"lineCount":233}},"error":null,"hash":"c2ab059f56a3491e50f5b4bc13db5a96","cacheData":{"env":{}}}