{"id":"node_modules/libp2p-mplex/src/mplex.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/package.json","includedInParent":true,"mtime":1604854753633},{"name":"it-pipe","loc":{"line":3,"column":21},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/mplex.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-pipe/index.js"},{"name":"it-pushable","loc":{"line":4,"column":25},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/mplex.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-pushable/index.js"},{"name":"debug","loc":{"line":5,"column":20},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/mplex.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/debug/src/browser.js"},{"name":"abortable-iterator","loc":{"line":6,"column":26},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/mplex.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/abortable-iterator/index.js"},{"name":"./coder","loc":{"line":7,"column":22},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/mplex.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/coder/index.js"},{"name":"./restrict-size","loc":{"line":8,"column":29},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/mplex.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/restrict-size.js"},{"name":"./message-types","loc":{"line":9,"column":51},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/mplex.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/message-types.js"},{"name":"./stream","loc":{"line":10,"column":29},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/mplex.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/stream.js"}],"generated":{"js":"'use strict'\n\nconst pipe = require('it-pipe')\nconst pushable = require('it-pushable')\nconst log = require('debug')('libp2p:mplex')\nconst abortable = require('abortable-iterator')\nconst Coder = require('./coder')\nconst restrictSize = require('./restrict-size')\nconst { MessageTypes, MessageTypeNames } = require('./message-types')\nconst createStream = require('./stream')\n\nclass Mplex {\n  /**\n   * @class\n   * @param {object} options\n   * @param {function(*)} options.onStream - Called whenever an inbound stream is created\n   * @param {function(*)} options.onStreamEnd - Called whenever a stream ends\n   * @param {AbortSignal} options.signal - An AbortController signal\n   */\n  constructor (options) {\n    options = options || {}\n    options = typeof options === 'function' ? { onStream: options } : options\n\n    this._streamId = 0\n    this._streams = {\n      /**\n       * @type {Map<number, *>} Stream to ids map\n       */\n      initiators: new Map(),\n      /**\n       * @type {Map<number, *>} Stream to ids map\n       */\n      receivers: new Map()\n    }\n    this._options = options\n\n    /**\n     * An iterable sink\n     */\n    this.sink = this._createSink()\n\n    /**\n     * An iterable source\n     */\n    this.source = this._createSource()\n\n    /**\n     * @property {Function} onStream\n     */\n    this.onStream = options.onStream\n\n    /**\n     * @property {Function} onStreamEnd\n     */\n    this.onStreamEnd = options.onStreamEnd\n  }\n\n  /**\n   * Returns a Map of streams and their ids\n   *\n   * @returns {Map<number,*>}\n   */\n  get streams () {\n    // Inbound and Outbound streams may have the same ids, so we need to make those unique\n    const streams = []\n    this._streams.initiators.forEach(stream => {\n      streams.push(stream)\n    })\n    this._streams.receivers.forEach(stream => {\n      streams.push(stream)\n    })\n    return streams\n  }\n\n  /**\n   * Initiate a new stream with the given name. If no name is\n   * provided, the id of th stream will be used.\n   *\n   * @param {string} [name] - If name is not a string it will be cast to one\n   * @returns {Stream}\n   */\n  newStream (name) {\n    const id = this._streamId++\n    name = name == null ? id.toString() : String(name)\n    const registry = this._streams.initiators\n    return this._newStream({ id, name, type: 'initiator', registry })\n  }\n\n  /**\n   * Called whenever an inbound stream is created\n   *\n   * @private\n   * @param {*} options\n   * @param {number} options.id\n   * @param {string} options.name\n   * @returns {*} A muxed stream\n   */\n  _newReceiverStream ({ id, name }) {\n    const registry = this._streams.receivers\n    return this._newStream({ id, name, type: 'receiver', registry })\n  }\n\n  /**\n   * Creates a new stream\n   *\n   * @private\n   * @param {object} options\n   * @param {number} options.id\n   * @param {string} options.name\n   * @param {string} options.type\n   * @param {Map<number, *>} options.registry - A map of streams to their ids\n   * @returns {*} A muxed stream\n   */\n  _newStream ({ id, name, type, registry }) {\n    if (registry.has(id)) {\n      throw new Error(`${type} stream ${id} already exists!`)\n    }\n    log('new %s stream %s %s', type, id, name)\n    const send = msg => {\n      if (log.enabled) {\n        log('%s stream %s %s send', type, id, name, { ...msg, type: MessageTypeNames[msg.type], data: msg.data && msg.data.slice() })\n      }\n      return this.source.push(msg)\n    }\n    const onEnd = () => {\n      log('%s stream %s %s ended', type, id, name)\n      registry.delete(id)\n      this.onStreamEnd && this.onStreamEnd(stream)\n    }\n    const stream = createStream({ id, name, send, type, onEnd, maxMsgSize: this._options.maxMsgSize })\n    registry.set(id, stream)\n    return stream\n  }\n\n  /**\n   * Creates a sink with an abortable source. Incoming messages will\n   * also have their size restricted. All messages will be varint decoded.\n   *\n   * @private\n   * @returns {*} Returns an iterable sink\n   */\n  _createSink () {\n    return async source => {\n      if (this._options.signal) {\n        source = abortable(source, this._options.signal)\n      }\n\n      try {\n        await pipe(\n          source,\n          Coder.decode,\n          restrictSize(this._options.maxMsgSize),\n          async source => {\n            for await (const msgs of source) {\n              for (const msg of msgs) {\n                this._handleIncoming(msg)\n              }\n            }\n          }\n        )\n      } catch (err) {\n        log('error in sink', err)\n        return this.source.end(err) // End the source with an error\n      }\n\n      this.source.end()\n    }\n  }\n\n  /**\n   * Creates a source that restricts outgoing message sizes\n   * and varint encodes them.\n   *\n   * @private\n   * @returns {*} An iterable source\n   */\n  _createSource () {\n    const onEnd = err => {\n      const { initiators, receivers } = this._streams\n      // Abort all the things!\n      for (const s of initiators.values()) s.abort(err)\n      for (const s of receivers.values()) s.abort(err)\n    }\n    const source = pushable({ onEnd, writev: true })\n    return Object.assign(Coder.encode(source), {\n      push: source.push,\n      end: source.end,\n      return: source.return\n    })\n  }\n\n  /**\n   * @private\n   * @param {object} options\n   * @param {number} options.id\n   * @param {string} options.type\n   * @param {Uint8Array|BufferList} options.data\n   * @returns {void}\n   */\n  _handleIncoming ({ id, type, data }) {\n    if (log.enabled) {\n      log('incoming message', { id, type: MessageTypeNames[type], data: data.slice() })\n    }\n\n    // Create a new stream?\n    if (type === MessageTypes.NEW_STREAM && this.onStream) {\n      const stream = this._newReceiverStream({ id, name: data.toString() })\n      return this.onStream(stream)\n    }\n\n    const list = type & 1 ? this._streams.initiators : this._streams.receivers\n    const stream = list.get(id)\n\n    if (!stream) return log('missing stream %s', id)\n\n    switch (type) {\n      case MessageTypes.MESSAGE_INITIATOR:\n      case MessageTypes.MESSAGE_RECEIVER:\n        stream.source.push(data)\n        break\n      case MessageTypes.CLOSE_INITIATOR:\n      case MessageTypes.CLOSE_RECEIVER:\n        stream.close()\n        break\n      case MessageTypes.RESET_INITIATOR:\n      case MessageTypes.RESET_RECEIVER:\n        stream.reset()\n        break\n      default:\n        log('unknown message type %s', type)\n    }\n  }\n}\n\nMplex.multicodec = '/mplex/6.7.0'\n\nmodule.exports = Mplex\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/libp2p-mplex/src/mplex.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}}],"sources":{"node_modules/libp2p-mplex/src/mplex.js":"'use strict'\n\nconst pipe = require('it-pipe')\nconst pushable = require('it-pushable')\nconst log = require('debug')('libp2p:mplex')\nconst abortable = require('abortable-iterator')\nconst Coder = require('./coder')\nconst restrictSize = require('./restrict-size')\nconst { MessageTypes, MessageTypeNames } = require('./message-types')\nconst createStream = require('./stream')\n\nclass Mplex {\n  /**\n   * @class\n   * @param {object} options\n   * @param {function(*)} options.onStream - Called whenever an inbound stream is created\n   * @param {function(*)} options.onStreamEnd - Called whenever a stream ends\n   * @param {AbortSignal} options.signal - An AbortController signal\n   */\n  constructor (options) {\n    options = options || {}\n    options = typeof options === 'function' ? { onStream: options } : options\n\n    this._streamId = 0\n    this._streams = {\n      /**\n       * @type {Map<number, *>} Stream to ids map\n       */\n      initiators: new Map(),\n      /**\n       * @type {Map<number, *>} Stream to ids map\n       */\n      receivers: new Map()\n    }\n    this._options = options\n\n    /**\n     * An iterable sink\n     */\n    this.sink = this._createSink()\n\n    /**\n     * An iterable source\n     */\n    this.source = this._createSource()\n\n    /**\n     * @property {Function} onStream\n     */\n    this.onStream = options.onStream\n\n    /**\n     * @property {Function} onStreamEnd\n     */\n    this.onStreamEnd = options.onStreamEnd\n  }\n\n  /**\n   * Returns a Map of streams and their ids\n   *\n   * @returns {Map<number,*>}\n   */\n  get streams () {\n    // Inbound and Outbound streams may have the same ids, so we need to make those unique\n    const streams = []\n    this._streams.initiators.forEach(stream => {\n      streams.push(stream)\n    })\n    this._streams.receivers.forEach(stream => {\n      streams.push(stream)\n    })\n    return streams\n  }\n\n  /**\n   * Initiate a new stream with the given name. If no name is\n   * provided, the id of th stream will be used.\n   *\n   * @param {string} [name] - If name is not a string it will be cast to one\n   * @returns {Stream}\n   */\n  newStream (name) {\n    const id = this._streamId++\n    name = name == null ? id.toString() : String(name)\n    const registry = this._streams.initiators\n    return this._newStream({ id, name, type: 'initiator', registry })\n  }\n\n  /**\n   * Called whenever an inbound stream is created\n   *\n   * @private\n   * @param {*} options\n   * @param {number} options.id\n   * @param {string} options.name\n   * @returns {*} A muxed stream\n   */\n  _newReceiverStream ({ id, name }) {\n    const registry = this._streams.receivers\n    return this._newStream({ id, name, type: 'receiver', registry })\n  }\n\n  /**\n   * Creates a new stream\n   *\n   * @private\n   * @param {object} options\n   * @param {number} options.id\n   * @param {string} options.name\n   * @param {string} options.type\n   * @param {Map<number, *>} options.registry - A map of streams to their ids\n   * @returns {*} A muxed stream\n   */\n  _newStream ({ id, name, type, registry }) {\n    if (registry.has(id)) {\n      throw new Error(`${type} stream ${id} already exists!`)\n    }\n    log('new %s stream %s %s', type, id, name)\n    const send = msg => {\n      if (log.enabled) {\n        log('%s stream %s %s send', type, id, name, { ...msg, type: MessageTypeNames[msg.type], data: msg.data && msg.data.slice() })\n      }\n      return this.source.push(msg)\n    }\n    const onEnd = () => {\n      log('%s stream %s %s ended', type, id, name)\n      registry.delete(id)\n      this.onStreamEnd && this.onStreamEnd(stream)\n    }\n    const stream = createStream({ id, name, send, type, onEnd, maxMsgSize: this._options.maxMsgSize })\n    registry.set(id, stream)\n    return stream\n  }\n\n  /**\n   * Creates a sink with an abortable source. Incoming messages will\n   * also have their size restricted. All messages will be varint decoded.\n   *\n   * @private\n   * @returns {*} Returns an iterable sink\n   */\n  _createSink () {\n    return async source => {\n      if (this._options.signal) {\n        source = abortable(source, this._options.signal)\n      }\n\n      try {\n        await pipe(\n          source,\n          Coder.decode,\n          restrictSize(this._options.maxMsgSize),\n          async source => {\n            for await (const msgs of source) {\n              for (const msg of msgs) {\n                this._handleIncoming(msg)\n              }\n            }\n          }\n        )\n      } catch (err) {\n        log('error in sink', err)\n        return this.source.end(err) // End the source with an error\n      }\n\n      this.source.end()\n    }\n  }\n\n  /**\n   * Creates a source that restricts outgoing message sizes\n   * and varint encodes them.\n   *\n   * @private\n   * @returns {*} An iterable source\n   */\n  _createSource () {\n    const onEnd = err => {\n      const { initiators, receivers } = this._streams\n      // Abort all the things!\n      for (const s of initiators.values()) s.abort(err)\n      for (const s of receivers.values()) s.abort(err)\n    }\n    const source = pushable({ onEnd, writev: true })\n    return Object.assign(Coder.encode(source), {\n      push: source.push,\n      end: source.end,\n      return: source.return\n    })\n  }\n\n  /**\n   * @private\n   * @param {object} options\n   * @param {number} options.id\n   * @param {string} options.type\n   * @param {Uint8Array|BufferList} options.data\n   * @returns {void}\n   */\n  _handleIncoming ({ id, type, data }) {\n    if (log.enabled) {\n      log('incoming message', { id, type: MessageTypeNames[type], data: data.slice() })\n    }\n\n    // Create a new stream?\n    if (type === MessageTypes.NEW_STREAM && this.onStream) {\n      const stream = this._newReceiverStream({ id, name: data.toString() })\n      return this.onStream(stream)\n    }\n\n    const list = type & 1 ? this._streams.initiators : this._streams.receivers\n    const stream = list.get(id)\n\n    if (!stream) return log('missing stream %s', id)\n\n    switch (type) {\n      case MessageTypes.MESSAGE_INITIATOR:\n      case MessageTypes.MESSAGE_RECEIVER:\n        stream.source.push(data)\n        break\n      case MessageTypes.CLOSE_INITIATOR:\n      case MessageTypes.CLOSE_RECEIVER:\n        stream.close()\n        break\n      case MessageTypes.RESET_INITIATOR:\n      case MessageTypes.RESET_RECEIVER:\n        stream.reset()\n        break\n      default:\n        log('unknown message type %s', type)\n    }\n  }\n}\n\nMplex.multicodec = '/mplex/6.7.0'\n\nmodule.exports = Mplex\n"},"lineCount":238}},"error":null,"hash":"22e01d76fb010357395134ece5c5cf0e","cacheData":{"env":{}}}