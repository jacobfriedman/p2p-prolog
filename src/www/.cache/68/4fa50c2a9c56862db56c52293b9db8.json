{"id":"node_modules/libp2p-utils/src/array-equals.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-utils/package.json","includedInParent":true,"mtime":1604854663745}],"generated":{"js":"'use strict'\n\n/**\n * Verify if two arrays of non primitive types with the \"equals\" function are equal.\n * Compatible with multiaddr, peer-id and others.\n *\n * @param {Array<*>} a\n * @param {Array<*>} b\n * @returns {boolean}\n */\nfunction arrayEquals (a, b) {\n  return a.length === b.length && b.sort() && a.sort().every((item, index) => b[index].equals(item))\n}\n\nmodule.exports = arrayEquals\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/libp2p-utils/src/array-equals.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/libp2p-utils/src/array-equals.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/libp2p-utils/src/array-equals.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/libp2p-utils/src/array-equals.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/libp2p-utils/src/array-equals.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/libp2p-utils/src/array-equals.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/libp2p-utils/src/array-equals.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/libp2p-utils/src/array-equals.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/libp2p-utils/src/array-equals.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/libp2p-utils/src/array-equals.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/libp2p-utils/src/array-equals.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/libp2p-utils/src/array-equals.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/libp2p-utils/src/array-equals.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/libp2p-utils/src/array-equals.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/libp2p-utils/src/array-equals.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/libp2p-utils/src/array-equals.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}}],"sources":{"node_modules/libp2p-utils/src/array-equals.js":"'use strict'\n\n/**\n * Verify if two arrays of non primitive types with the \"equals\" function are equal.\n * Compatible with multiaddr, peer-id and others.\n *\n * @param {Array<*>} a\n * @param {Array<*>} b\n * @returns {boolean}\n */\nfunction arrayEquals (a, b) {\n  return a.length === b.length && b.sort() && a.sort().every((item, index) => b[index].equals(item))\n}\n\nmodule.exports = arrayEquals\n"},"lineCount":16}},"error":null,"hash":"730e38931494b8b19da89e44efbb427e","cacheData":{"env":{}}}