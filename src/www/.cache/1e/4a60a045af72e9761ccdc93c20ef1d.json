{"id":"node_modules/it-reader/index.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-reader/package.json","includedInParent":true,"mtime":1604854663745},{"name":"bl/BufferList","loc":{"line":1,"column":27},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-reader/index.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/bl/BufferList.js"}],"generated":{"js":"const BufferList = require('bl/BufferList')\n\nmodule.exports = source => {\n  const reader = (async function * () {\n    let bytes = yield // Allows us to receive 8 when reader.next(8) is called\n    let bl = new BufferList()\n\n    for await (const chunk of source) {\n      if (!bytes) {\n        bytes = yield bl.append(chunk)\n        bl = new BufferList()\n        continue\n      }\n\n      bl.append(chunk)\n\n      while (bl.length >= bytes) {\n        const data = bl.shallowSlice(0, bytes)\n        bl.consume(bytes)\n        bytes = yield data\n\n        // If we no longer want a specific byte length, we yield the rest now\n        if (!bytes) {\n          if (bl.length) {\n            bytes = yield bl\n            bl = new BufferList()\n          }\n          break // bytes is null and/or no more buffer to yield\n        }\n      }\n    }\n\n    // Consumer wants more bytes but the source has ended and our buffer\n    // is not big enough to satisfy.\n    if (bytes) {\n      throw Object.assign(\n        new Error(`stream ended before ${bytes} bytes became available`),\n        { code: 'ERR_UNDER_READ', buffer: bl }\n      )\n    }\n  })()\n\n  reader.next()\n  return reader\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/it-reader/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/it-reader/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}}],"sources":{"node_modules/it-reader/index.js":"const BufferList = require('bl/BufferList')\n\nmodule.exports = source => {\n  const reader = (async function * () {\n    let bytes = yield // Allows us to receive 8 when reader.next(8) is called\n    let bl = new BufferList()\n\n    for await (const chunk of source) {\n      if (!bytes) {\n        bytes = yield bl.append(chunk)\n        bl = new BufferList()\n        continue\n      }\n\n      bl.append(chunk)\n\n      while (bl.length >= bytes) {\n        const data = bl.shallowSlice(0, bytes)\n        bl.consume(bytes)\n        bytes = yield data\n\n        // If we no longer want a specific byte length, we yield the rest now\n        if (!bytes) {\n          if (bl.length) {\n            bytes = yield bl\n            bl = new BufferList()\n          }\n          break // bytes is null and/or no more buffer to yield\n        }\n      }\n    }\n\n    // Consumer wants more bytes but the source has ended and our buffer\n    // is not big enough to satisfy.\n    if (bytes) {\n      throw Object.assign(\n        new Error(`stream ended before ${bytes} bytes became available`),\n        { code: 'ERR_UNDER_READ', buffer: bl }\n      )\n    }\n  })()\n\n  reader.next()\n  return reader\n}\n"},"lineCount":46}},"error":null,"hash":"1ecec082a75241c5e1e5740c88606830","cacheData":{"env":{}}}