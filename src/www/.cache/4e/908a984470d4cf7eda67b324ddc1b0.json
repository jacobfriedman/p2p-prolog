{"id":"node_modules/it-length-prefixed/src/encode.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-length-prefixed/package.json","includedInParent":true,"mtime":1604854663745},{"name":"buffer","loc":{"line":3,"column":27},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-length-prefixed/src/encode.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/node-libs-browser/node_modules/buffer/index.js"},{"name":"bl/BufferList","loc":{"line":4,"column":27},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-length-prefixed/src/encode.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/bl/BufferList.js"},{"name":"./varint-encode","loc":{"line":5,"column":29},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-length-prefixed/src/encode.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-length-prefixed/src/varint-encode.js"}],"generated":{"js":"\n'use strict'\n\nconst { Buffer } = require('buffer')\nconst BufferList = require('bl/BufferList')\nconst varintEncode = require('./varint-encode')\n\nconst MIN_POOL_SIZE = 8 // Varint.encode(Number.MAX_SAFE_INTEGER).length\nconst DEFAULT_POOL_SIZE = 10 * 1024\n\nfunction encode (options) {\n  options = options || {}\n\n  const poolSize = Math.max(options.poolSize || DEFAULT_POOL_SIZE, options.minPoolSize || MIN_POOL_SIZE)\n  const encodeLength = options.lengthEncoder || varintEncode\n\n  return source => (async function * () {\n    let pool = Buffer.alloc(poolSize)\n    let poolOffset = 0\n\n    for await (const chunk of source) {\n      encodeLength(chunk.length, pool, poolOffset)\n      const encodedLength = pool.slice(poolOffset, poolOffset + encodeLength.bytes)\n      poolOffset += encodeLength.bytes\n\n      if (pool.length - poolOffset < MIN_POOL_SIZE) {\n        pool = Buffer.alloc(poolSize)\n        poolOffset = 0\n      }\n\n      yield new BufferList().append(encodedLength).append(chunk)\n      // yield Buffer.concat([encodedLength, chunk])\n    }\n  })()\n}\n\nencode.single = (chunk, options) => {\n  options = options || {}\n  const encodeLength = options.lengthEncoder || varintEncode\n  return new BufferList([encodeLength(chunk.length), chunk])\n}\n\nmodule.exports = encode\nmodule.exports.MIN_POOL_SIZE = MIN_POOL_SIZE\nmodule.exports.DEFAULT_POOL_SIZE = DEFAULT_POOL_SIZE\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/it-length-prefixed/src/encode.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}}],"sources":{"node_modules/it-length-prefixed/src/encode.js":"'use strict'\n\nconst { Buffer } = require('buffer')\nconst BufferList = require('bl/BufferList')\nconst varintEncode = require('./varint-encode')\n\nconst MIN_POOL_SIZE = 8 // Varint.encode(Number.MAX_SAFE_INTEGER).length\nconst DEFAULT_POOL_SIZE = 10 * 1024\n\nfunction encode (options) {\n  options = options || {}\n\n  const poolSize = Math.max(options.poolSize || DEFAULT_POOL_SIZE, options.minPoolSize || MIN_POOL_SIZE)\n  const encodeLength = options.lengthEncoder || varintEncode\n\n  return source => (async function * () {\n    let pool = Buffer.alloc(poolSize)\n    let poolOffset = 0\n\n    for await (const chunk of source) {\n      encodeLength(chunk.length, pool, poolOffset)\n      const encodedLength = pool.slice(poolOffset, poolOffset + encodeLength.bytes)\n      poolOffset += encodeLength.bytes\n\n      if (pool.length - poolOffset < MIN_POOL_SIZE) {\n        pool = Buffer.alloc(poolSize)\n        poolOffset = 0\n      }\n\n      yield new BufferList().append(encodedLength).append(chunk)\n      // yield Buffer.concat([encodedLength, chunk])\n    }\n  })()\n}\n\nencode.single = (chunk, options) => {\n  options = options || {}\n  const encodeLength = options.lengthEncoder || varintEncode\n  return new BufferList([encodeLength(chunk.length), chunk])\n}\n\nmodule.exports = encode\nmodule.exports.MIN_POOL_SIZE = MIN_POOL_SIZE\nmodule.exports.DEFAULT_POOL_SIZE = DEFAULT_POOL_SIZE\n"},"lineCount":46}},"error":null,"hash":"a7bfd336b67939c48f8d528cd8dd20c2","cacheData":{"env":{}}}