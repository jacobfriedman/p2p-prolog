{"id":"node_modules/multiaddr-to-uri/index.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multiaddr-to-uri/package.json","includedInParent":true,"mtime":1604854741185},{"name":"multiaddr","loc":{"line":1,"column":26},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multiaddr-to-uri/index.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multiaddr/src/index.js"}],"generated":{"js":"const Multiaddr = require('multiaddr')\n\nconst reduceValue = (_, v) => v\nconst tcpUri = (str, port, parts, opts) => {\n  // return tcp when explicitly requested\n  if (opts && opts.assumeHttp === false) return `tcp://${str}:${port}`\n  // check if tcp is the last protocol in multiaddr\n  let protocol = 'tcp'\n  let explicitPort = `:${port}`\n  const last = parts[parts.length - 1]\n  if (last.protocol === 'tcp') {\n    // assume http and produce clean urls\n    protocol = port === '443' ? 'https' : 'http'\n    explicitPort = port === '443' || port === '80' ? '' : explicitPort\n  }\n  return `${protocol}://${str}${explicitPort}`\n}\n\nconst Reducers = {\n  ip4: reduceValue,\n  ip6: (str, content, i, parts) => (\n    parts.length === 1 && parts[0].protocol === 'ip6'\n      ? content\n      : `[${content}]`\n  ),\n  tcp: (str, content, i, parts, opts) => (\n    parts.some(p => ['http', 'https', 'ws', 'wss'].includes(p.protocol))\n      ? `${str}:${content}`\n      : tcpUri(str, content, parts, opts)\n  ),\n  udp: (str, content) => `udp://${str}:${content}`,\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: (str, content) => `${str}/ipfs/${content}`,\n  p2p: (str, content) => `${str}/p2p/${content}`,\n  http: str => `http://${str}`,\n  https: str => `https://${str}`,\n  ws: str => `ws://${str}`,\n  wss: str => `wss://${str}`,\n  'p2p-websocket-star': str => `${str}/p2p-websocket-star`,\n  'p2p-webrtc-star': str => `${str}/p2p-webrtc-star`,\n  'p2p-webrtc-direct': str => `${str}/p2p-webrtc-direct`\n}\n\nmodule.exports = (multiaddr, opts) => {\n  const ma = Multiaddr(multiaddr)\n  const parts = multiaddr.toString().split('/').slice(1)\n  return ma\n    .tuples()\n    .map(tuple => ({\n      protocol: parts.shift(),\n      content: tuple[1] ? parts.shift() : null\n    }))\n    .reduce((str, part, i, parts) => {\n      const reduce = Reducers[part.protocol]\n      if (!reduce) throw new Error(`Unsupported protocol ${part.protocol}`)\n      return reduce(str, part.content, i, parts, opts)\n    }, '')\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/multiaddr-to-uri/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}}],"sources":{"node_modules/multiaddr-to-uri/index.js":"const Multiaddr = require('multiaddr')\n\nconst reduceValue = (_, v) => v\nconst tcpUri = (str, port, parts, opts) => {\n  // return tcp when explicitly requested\n  if (opts && opts.assumeHttp === false) return `tcp://${str}:${port}`\n  // check if tcp is the last protocol in multiaddr\n  let protocol = 'tcp'\n  let explicitPort = `:${port}`\n  const last = parts[parts.length - 1]\n  if (last.protocol === 'tcp') {\n    // assume http and produce clean urls\n    protocol = port === '443' ? 'https' : 'http'\n    explicitPort = port === '443' || port === '80' ? '' : explicitPort\n  }\n  return `${protocol}://${str}${explicitPort}`\n}\n\nconst Reducers = {\n  ip4: reduceValue,\n  ip6: (str, content, i, parts) => (\n    parts.length === 1 && parts[0].protocol === 'ip6'\n      ? content\n      : `[${content}]`\n  ),\n  tcp: (str, content, i, parts, opts) => (\n    parts.some(p => ['http', 'https', 'ws', 'wss'].includes(p.protocol))\n      ? `${str}:${content}`\n      : tcpUri(str, content, parts, opts)\n  ),\n  udp: (str, content) => `udp://${str}:${content}`,\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: (str, content) => `${str}/ipfs/${content}`,\n  p2p: (str, content) => `${str}/p2p/${content}`,\n  http: str => `http://${str}`,\n  https: str => `https://${str}`,\n  ws: str => `ws://${str}`,\n  wss: str => `wss://${str}`,\n  'p2p-websocket-star': str => `${str}/p2p-websocket-star`,\n  'p2p-webrtc-star': str => `${str}/p2p-webrtc-star`,\n  'p2p-webrtc-direct': str => `${str}/p2p-webrtc-direct`\n}\n\nmodule.exports = (multiaddr, opts) => {\n  const ma = Multiaddr(multiaddr)\n  const parts = multiaddr.toString().split('/').slice(1)\n  return ma\n    .tuples()\n    .map(tuple => ({\n      protocol: parts.shift(),\n      content: tuple[1] ? parts.shift() : null\n    }))\n    .reduce((str, part, i, parts) => {\n      const reduce = Reducers[part.protocol]\n      if (!reduce) throw new Error(`Unsupported protocol ${part.protocol}`)\n      return reduce(str, part.content, i, parts, opts)\n    }, '')\n}\n"},"lineCount":61}},"error":null,"hash":"364e4c81057cdb3d559270ffc729dd11","cacheData":{"env":{}}}