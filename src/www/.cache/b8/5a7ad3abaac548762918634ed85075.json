{"id":"index.html","dependencies":[{"name":"./index.js","dynamic":true,"resolved":"/home/jacob/projects/p2p-prolog/src/www/index.js","parent":"/home/jacob/projects/p2p-prolog/src/www/index.html"},{"name":"_css_loader","parent":"/home/jacob/projects/p2p-prolog/src/www/index.html","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/parcel-bundler/src/builtins/css-loader.js"},{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685}],"generated":{"html":"<!DOCTYPE html>\n\n<html lang=\"en\">\n\n  <head>\n    <meta charset=\"utf-8\">\n    <title>🦉⇄🦉 P2PLog</title>\n\n\n  <style>html {\n              background:black;\n            }\n            body { font-family: mono;\n\n              filter:invert(1);\n\n            }\n            invert {\n              filter:invert(1);\n            }\n            .app { display: flex; }\n            .console, .editor { flex: 1; box-sizing: border-box; padding: 10px; }\n            .console { max-width: 600px; }\n            .output-error { color: #900; }\n            input, textarea { box-sizing: border-box; width: 100%; }\n            .loader { animation: blinker 1s linear infinite; font-size: 70px; display: none; }\n\n            #libp2poutput, #libp2pstatus {\n              border:1px solid red;\n              overflow-y:scroll;\n              height:80px;\n              display:block;\n            }</style>\n        \n  </head>\n\n  <body>\n    <h1 id=\"status\">\n      <pre>\n___  __   ___    ___  ____ ____ _    ____ ____\n|--'  /_  |--'   |--' |--< [__] |___ [__] |__,     \n</pre>\n\n\n    </h1>\n      <p>\n      Visit /&laquo;id&raquo;  where id = docker-compose log:<br>\n      ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈<br>\n      <invert>🌐</invert> Your Address:   /ip4/0.0.0.0/tcp/9998/ws/p2p-webrtc-star/p2p/&laquo;id&raquo;<br>\n      ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈<br>\n      </p>\n    <main>\n        <pre id=\"libp2pstatus\"></pre>\n      <pre id=\"libp2poutput\"></pre>\n    </main>\n    <script src=\"/168726dbe96b3ce427e7fedce31bb0bc.js\"></script>\n  <script type=\"module\">\n\n    import SWIPL from './swipl-web.js';\n\n     let bindings = null;\n            let stdin = '';\n            let stdinPosition = 0;\n            // We use this to provide data into\n            // the SWI stdin.\n            const setStdin = (string) => {\n                stdin = string;\n                stdinPosition = 0;\n            };\n            const readStdin = () => {\n                if (stdinPosition >= stdin.length) {\n                    return null;\n                } else {\n                    const code = stdin.charCodeAt(stdinPosition);\n                    stdinPosition++;\n                    return code;\n                }\n            };\n            const output = document.getElementById('output');\n            const input = document.getElementById('input');\n            const editor = document.getElementById('editor');\n\n            // Helper function to call a query.\n            const query = (bindings, input) => {\n                // Show the query in the console output.\n                const node = document.createTextNode(input + '\\n');\n                output.appendChild(node);\n                setStdin(input);\n                // This will execute one iteration of toplevel.\n                call(bindings, 'break'); // see call.js\n            }\n            \n\n            // Helper to print stdout from SWI.\n            const print = (line) => {\n                output.appendChild(document.createTextNode(line + '\\n'));\n            };\n\n            // Helper to print stderr from SWI.\n            const printErr = (line) => {\n                const node = document.createElement('span');\n                node.className = 'output-error';\n                node.textContent = line + '\\n';\n                output.appendChild(node);\n            };\n\n            // Creates bindings to the SWI foreign API.\n            const createBindings = (module) => {\n                return {\n                    PL_initialise: module.cwrap('PL_initialise', 'number', ['number', 'number']),\n                    PL_new_term_ref: module.cwrap('PL_new_term_ref', 'number', []),\n                    PL_chars_to_term: module.cwrap('PL_chars_to_term', 'number', ['string', 'number']),\n                    PL_call: module.cwrap('PL_call', 'number', ['number', 'number'])\n                };\n            };\n\n            // Helper function to parse a JavaScript\n            // string into a Prolog term and call is as a query.\n            const call = (bindings, query) => {\n                const ref = bindings.PL_new_term_ref();\n                if (!bindings.PL_chars_to_term(query, ref)) {\n                    throw new Error('Query has a syntax error: ' + query);\n                }\n                return !!bindings.PL_call(ref, 0);\n            };\n\n            // This will set up the arguments necessary for the PL_initialise\n            // function and will call it.\n            // See http://www.swi-prolog.org/pldoc/doc_for?object=c(%27PL_initialise%27)\n            const initialise = (bindings, module) => {\n                const argvArray = [\n                    module.allocate(module.intArrayFromString('swipl'), 'i8', module.ALLOC_NORMAL),\n                    module.allocate(module.intArrayFromString('-x'), 'i8', module.ALLOC_NORMAL),\n                    module.allocate(module.intArrayFromString('wasm-preload/swipl.prc'), 'i8', module.ALLOC_NORMAL),\n                    module.allocate(module.intArrayFromString('--nosignals'), 'i8', module.ALLOC_NORMAL)\n                ];\n                const argvPtr = module._malloc(argvArray.length * 4);\n                for (let i = 0; i < argvArray.length; i++) {\n                    module.setValue(argvPtr + i * 4, argvArray[i], '*');\n                }\n                if (!bindings.PL_initialise(4, argvPtr)) {\n                    throw new Error('SWI-Prolog initialisation failed.');\n                }\n                // Set the path of the preloaded (from swipl-web.dat) standard library.\n                // This makes it possible to call use_module(library(lists)) and so on.\n                call(bindings, \"assert(user:file_search_path(library, 'wasm-preload/library')).\");\n            };\n\n\n     // INIT\n     (async () => {\n      const swipl = SWIPL({\n            arguments:['swipl','-x', 'wasm-preload/boot.prc', '--nosignals'],\n            print: print,\n            printErr: printErr,\n            preRun: [module => module.FS.init(readStdin)],\n\n          }).then(module => {\n\n            console.log({module})\n\n            bindings = createBindings(module);\n\n            // Initialise SWI-Prolog.\n            initialise(bindings, module);\n\n\n\n        input.addEventListener('submit', (e) => {\n                e.preventDefault();\n                query(bindings, e.target.elements.query.value);\n                e.target.elements.query.value = '';\n            }, false);\n            \n            editor.addEventListener('submit', (e) => {\n                e.preventDefault();\n                module.FS.writeFile('/file.pl', e.target.elements.file.value);\n                query(bindings, \"consult('/file.pl').\");\n            }, false);\n\n\n        });\n     })();\n     // END INIT\n\n            \n  const observer = new MutationObserver((mutationList,observer) => console.log(mutationList)\n                       ).observe(\n                                 window.document, \n                                 { \n                                  attributes: true, \n                                  childList: true, \n                                  subtree: true, \n                                  characterData: true \n                                } \n      )\n\n  </script>\n\n  \n\n\n            <div class=\"app\">\n                <div class=\"console\">\n                    <pre class=\"output\" id=\"output\"></pre>\n                    <form class=\"input\" id=\"input\">\n                        <input type=\"text\" name=\"query\">\n                    </form>\n                </div>\n                <div class=\"editor\">\n                    <form id=\"editor\">\n                        <textarea name=\"file\" rows=\"40\">\n:- use_module(library(lists)).\n\n%%    queens(+N, -Queens) is nondet.\n%\n% @param  Queens is a list of column numbers for placing the queens.\n% @author Richard A. O'Keefe (The Craft of Prolog)\n\nqueens(N, Queens) :-\n    length(Queens, N),\n    board(Queens, Board, 0, N, _, _),\n    queens(Board, 0, Queens).\n\nboard([], [], N, N, _, _).\nboard([_|Queens], [Col-Vars|Board], Col0, N, [_|VR], VC) :-\n    Col is Col0+1,\n    functor(Vars, f, N),\n    constraints(N, Vars, VR, VC),\n    board(Queens, Board, Col, N, VR, [_|VC]).\n\nconstraints(0, _, _, _) :- !.\nconstraints(N, Row, [R|Rs], [C|Cs]) :-\n    arg(N, Row, R-C),\n    M is N-1,\n    constraints(M, Row, Rs, Cs).\n\nqueens([], _, []).\nqueens([C|Cs], Row0, [Col|Solution]) :-\n    Row is Row0+1,\n    select(Col-Vars, [C|Cs], Board),\n    arg(Row, Vars, Row-Row),\n    queens(Board, Row, Solution).\n                        </textarea>\n                        <button type=\"submit\">(Re)consult</button>\n                    </form>\n                </div>\n\n\n  </div></body>\n\n</html>"},"sourceMaps":null,"error":null,"hash":"90ffa7dafafc8f8b14315b7eed37316f","cacheData":{"env":{}}}