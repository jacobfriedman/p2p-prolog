{"id":"node_modules/multiaddr/src/resolvers/dns.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multiaddr/package.json","includedInParent":true,"mtime":1604854663745},{"name":"dns","optional":true,"loc":{"line":6,"column":16},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multiaddr/src/resolvers/dns.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"dns-over-http-resolver","optional":true,"loc":{"line":11,"column":16},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multiaddr/src/resolvers/dns.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/dns-over-http-resolver/src/index.js"}],"generated":{"js":"'use strict'\n\nlet dns\n\ntry {\n  dns = require('dns').promises\n  if (!dns) {\n    throw new Error('no dns available')\n  }\n} catch (err) {\n  dns = require('dns-over-http-resolver')\n}\n\nmodule.exports = dns\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/multiaddr/src/resolvers/dns.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/dns.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/dns.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/dns.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/dns.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/dns.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/dns.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/dns.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/dns.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/dns.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/dns.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/dns.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/dns.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/dns.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/multiaddr/src/resolvers/dns.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}}],"sources":{"node_modules/multiaddr/src/resolvers/dns.js":"'use strict'\n\nlet dns\n\ntry {\n  dns = require('dns').promises\n  if (!dns) {\n    throw new Error('no dns available')\n  }\n} catch (err) {\n  dns = require('dns-over-http-resolver')\n}\n\nmodule.exports = dns\n"},"lineCount":15}},"error":null,"hash":"536a85082b039cf2ee9def0ce21ca5a7","cacheData":{"env":{}}}