{"id":"node_modules/libp2p-mplex/src/restrict-size.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/package.json","includedInParent":true,"mtime":1604854753633}],"generated":{"js":"'use strict'\n\nconst MAX_MSG_SIZE = 1 << 20 // 1MB\n\n/**\n * Creates an iterable transform that restricts message sizes to\n * the given maximum size.\n *\n * @param {number} [max] - The maximum message size. Defaults to 1MB\n * @returns {*} An iterable transform.\n */\nmodule.exports = max => {\n  max = max || MAX_MSG_SIZE\n\n  const checkSize = msg => {\n    if (msg.data && msg.data.length > max) {\n      throw Object.assign(new Error('message size too large!'), { code: 'ERR_MSG_TOO_BIG' })\n    }\n  }\n\n  return source => {\n    return (async function * restrictSize () {\n      for await (const msg of source) {\n        if (Array.isArray(msg)) {\n          msg.forEach(checkSize)\n        } else {\n          checkSize(msg)\n        }\n        yield msg\n      }\n    })()\n  }\n}\n\nmodule.exports.MAX_MSG_SIZE = MAX_MSG_SIZE\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/libp2p-mplex/src/restrict-size.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}}],"sources":{"node_modules/libp2p-mplex/src/restrict-size.js":"'use strict'\n\nconst MAX_MSG_SIZE = 1 << 20 // 1MB\n\n/**\n * Creates an iterable transform that restricts message sizes to\n * the given maximum size.\n *\n * @param {number} [max] - The maximum message size. Defaults to 1MB\n * @returns {*} An iterable transform.\n */\nmodule.exports = max => {\n  max = max || MAX_MSG_SIZE\n\n  const checkSize = msg => {\n    if (msg.data && msg.data.length > max) {\n      throw Object.assign(new Error('message size too large!'), { code: 'ERR_MSG_TOO_BIG' })\n    }\n  }\n\n  return source => {\n    return (async function * restrictSize () {\n      for await (const msg of source) {\n        if (Array.isArray(msg)) {\n          msg.forEach(checkSize)\n        } else {\n          checkSize(msg)\n        }\n        yield msg\n      }\n    })()\n  }\n}\n\nmodule.exports.MAX_MSG_SIZE = MAX_MSG_SIZE\n"},"lineCount":36}},"error":null,"hash":"3e569402ea09ac95be7e4467604d6240","cacheData":{"env":{}}}