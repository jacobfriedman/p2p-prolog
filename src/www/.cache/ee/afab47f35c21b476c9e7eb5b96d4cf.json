{"id":"node_modules/libp2p-noise/dist/src/handshakes/ik.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-noise/dist/src/handshakes/ik.js.map","includedInParent":true,"mtime":1599134931000},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-noise/src/handshakes/ik.ts","includedInParent":true,"mtime":1599134850000},{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-noise/package.json","includedInParent":true,"mtime":1604854764649},{"name":"buffer","loc":{"line":4,"column":25},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-noise/dist/src/handshakes/ik.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/node-libs-browser/node_modules/buffer/index.js"},{"name":"../utils","loc":{"line":5,"column":24},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-noise/dist/src/handshakes/ik.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-noise/dist/src/utils.js"},{"name":"./abstract-handshake","loc":{"line":6,"column":37},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-noise/dist/src/handshakes/ik.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-noise/dist/src/handshakes/abstract-handshake.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IK = void 0;\nconst buffer_1 = require(\"buffer\");\nconst utils_1 = require(\"../utils\");\nconst abstract_handshake_1 = require(\"./abstract-handshake\");\nclass IK extends abstract_handshake_1.AbstractHandshake {\n    initSession(initiator, prologue, s, rs) {\n        const psk = this.createEmptyKey();\n        let hs;\n        if (initiator) {\n            hs = this.initializeInitiator(prologue, s, rs, psk);\n        }\n        else {\n            hs = this.initializeResponder(prologue, s, rs, psk);\n        }\n        return {\n            hs,\n            i: initiator,\n            mc: 0\n        };\n    }\n    sendMessage(session, message) {\n        let messageBuffer;\n        if (session.mc === 0) {\n            messageBuffer = this.writeMessageA(session.hs, message);\n        }\n        else if (session.mc === 1) {\n            const { messageBuffer: mb, h, cs1, cs2 } = this.writeMessageB(session.hs, message);\n            messageBuffer = mb;\n            session.h = h;\n            session.cs1 = cs1;\n            session.cs2 = cs2;\n        }\n        else if (session.mc > 1) {\n            if (session.i) {\n                if (!session.cs1) {\n                    throw new Error('CS1 (cipher state) is not defined');\n                }\n                messageBuffer = this.writeMessageRegular(session.cs1, message);\n            }\n            else {\n                if (!session.cs2) {\n                    throw new Error('CS2 (cipher state) is not defined');\n                }\n                messageBuffer = this.writeMessageRegular(session.cs2, message);\n            }\n        }\n        else {\n            throw new Error('Session invalid.');\n        }\n        session.mc++;\n        return messageBuffer;\n    }\n    recvMessage(session, message) {\n        let plaintext = buffer_1.Buffer.alloc(0);\n        let valid = false;\n        if (session.mc === 0) {\n            ({ plaintext, valid } = this.readMessageA(session.hs, message));\n        }\n        if (session.mc === 1) {\n            const { plaintext: pt, valid: v, h, cs1, cs2 } = this.readMessageB(session.hs, message);\n            plaintext = pt;\n            valid = v;\n            session.h = h;\n            session.cs1 = cs1;\n            session.cs2 = cs2;\n        }\n        session.mc++;\n        return { plaintext, valid };\n    }\n    writeMessageA(hs, payload) {\n        hs.e = utils_1.generateKeypair();\n        const ne = hs.e.publicKey;\n        this.mixHash(hs.ss, ne);\n        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n        const spk = buffer_1.Buffer.from(hs.s.publicKey);\n        const ns = this.encryptAndHash(hs.ss, spk);\n        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs));\n        const ciphertext = this.encryptAndHash(hs.ss, payload);\n        return { ne, ns, ciphertext };\n    }\n    writeMessageB(hs, payload) {\n        hs.e = utils_1.generateKeypair();\n        const ne = hs.e.publicKey;\n        this.mixHash(hs.ss, ne);\n        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n        const ciphertext = this.encryptAndHash(hs.ss, payload);\n        const ns = this.createEmptyKey();\n        const messageBuffer = { ne, ns, ciphertext };\n        const { cs1, cs2 } = this.split(hs.ss);\n        return { messageBuffer, cs1, cs2, h: hs.ss.h };\n    }\n    readMessageA(hs, message) {\n        if (utils_1.isValidPublicKey(message.ne)) {\n            hs.re = message.ne;\n        }\n        this.mixHash(hs.ss, hs.re);\n        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n        const { plaintext: ns, valid: valid1 } = this.decryptAndHash(hs.ss, message.ns);\n        if (valid1 && ns.length === 32 && utils_1.isValidPublicKey(ns)) {\n            hs.rs = ns;\n        }\n        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs));\n        const { plaintext, valid: valid2 } = this.decryptAndHash(hs.ss, message.ciphertext);\n        return { plaintext, valid: (valid1 && valid2) };\n    }\n    readMessageB(hs, message) {\n        if (utils_1.isValidPublicKey(message.ne)) {\n            hs.re = message.ne;\n        }\n        this.mixHash(hs.ss, hs.re);\n        if (!hs.e) {\n            throw new Error('Handshake state should contain ephemeral key by now.');\n        }\n        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n        const { plaintext, valid } = this.decryptAndHash(hs.ss, message.ciphertext);\n        const { cs1, cs2 } = this.split(hs.ss);\n        return { h: hs.ss.h, valid, plaintext, cs1, cs2 };\n    }\n    initializeInitiator(prologue, s, rs, psk) {\n        const name = 'Noise_IK_25519_ChaChaPoly_SHA256';\n        const ss = this.initializeSymmetric(name);\n        this.mixHash(ss, prologue);\n        this.mixHash(ss, rs);\n        const re = buffer_1.Buffer.alloc(32);\n        return { ss, s, rs, re, psk };\n    }\n    initializeResponder(prologue, s, rs, psk) {\n        const name = 'Noise_IK_25519_ChaChaPoly_SHA256';\n        const ss = this.initializeSymmetric(name);\n        this.mixHash(ss, prologue);\n        this.mixHash(ss, s.publicKey);\n        const re = buffer_1.Buffer.alloc(32);\n        return { ss, s, rs, re, psk };\n    }\n}\nexports.IK = IK;\n"},"sourceMaps":{"js":{"version":3,"file":"ik.js","sourceRoot":"","sources":["../../../src/handshakes/ik.ts"],"names":[],"mappings":"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","sourcesContent":["import { Buffer } from 'buffer'\nimport { CipherState, HandshakeState, MessageBuffer, NoiseSession } from '../@types/handshake'\nimport { bytes, bytes32 } from '../@types/basic'\nimport { generateKeypair, isValidPublicKey } from '../utils'\nimport { AbstractHandshake } from './abstract-handshake'\nimport { KeyPair } from '../@types/libp2p'\n\nexport class IK extends AbstractHandshake {\n  public initSession (initiator: boolean, prologue: bytes32, s: KeyPair, rs: bytes32): NoiseSession {\n    const psk = this.createEmptyKey()\n\n    let hs\n    if (initiator) {\n      hs = this.initializeInitiator(prologue, s, rs, psk)\n    } else {\n      hs = this.initializeResponder(prologue, s, rs, psk)\n    }\n\n    return {\n      hs,\n      i: initiator,\n      mc: 0\n    }\n  }\n\n  public sendMessage (session: NoiseSession, message: bytes): MessageBuffer {\n    let messageBuffer: MessageBuffer\n    if (session.mc === 0) {\n      messageBuffer = this.writeMessageA(session.hs, message)\n    } else if (session.mc === 1) {\n      const { messageBuffer: mb, h, cs1, cs2 } = this.writeMessageB(session.hs, message)\n      messageBuffer = mb\n      session.h = h\n      session.cs1 = cs1\n      session.cs2 = cs2\n    } else if (session.mc > 1) {\n      if (session.i) {\n        if (!session.cs1) {\n          throw new Error('CS1 (cipher state) is not defined')\n        }\n\n        messageBuffer = this.writeMessageRegular(session.cs1, message)\n      } else {\n        if (!session.cs2) {\n          throw new Error('CS2 (cipher state) is not defined')\n        }\n\n        messageBuffer = this.writeMessageRegular(session.cs2, message)\n      }\n    } else {\n      throw new Error('Session invalid.')\n    }\n\n    session.mc++\n    return messageBuffer\n  }\n\n  public recvMessage (session: NoiseSession, message: MessageBuffer): {plaintext: bytes; valid: boolean} {\n    let plaintext = Buffer.alloc(0); let valid = false\n    if (session.mc === 0) {\n      ({ plaintext, valid } = this.readMessageA(session.hs, message))\n    }\n    if (session.mc === 1) {\n      const { plaintext: pt, valid: v, h, cs1, cs2 } = this.readMessageB(session.hs, message)\n      plaintext = pt\n      valid = v\n      session.h = h\n      session.cs1 = cs1\n      session.cs2 = cs2\n    }\n    session.mc++\n    return { plaintext, valid }\n  }\n\n  private writeMessageA (hs: HandshakeState, payload: bytes): MessageBuffer {\n    hs.e = generateKeypair()\n    const ne = hs.e.publicKey\n    this.mixHash(hs.ss, ne)\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs))\n    const spk = Buffer.from(hs.s.publicKey)\n    const ns = this.encryptAndHash(hs.ss, spk)\n\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs))\n    const ciphertext = this.encryptAndHash(hs.ss, payload)\n\n    return { ne, ns, ciphertext }\n  }\n\n  private writeMessageB (hs: HandshakeState, payload: bytes) {\n    hs.e = generateKeypair()\n    const ne = hs.e.publicKey\n    this.mixHash(hs.ss, ne)\n\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re))\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs))\n    const ciphertext = this.encryptAndHash(hs.ss, payload)\n    const ns = this.createEmptyKey()\n    const messageBuffer: MessageBuffer = { ne, ns, ciphertext }\n    const { cs1, cs2 } = this.split(hs.ss)\n\n    return { messageBuffer, cs1, cs2, h: hs.ss.h }\n  }\n\n  private readMessageA (hs: HandshakeState, message: MessageBuffer): {plaintext: bytes; valid: boolean} {\n    if (isValidPublicKey(message.ne)) {\n      hs.re = message.ne\n    }\n\n    this.mixHash(hs.ss, hs.re)\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re))\n    const { plaintext: ns, valid: valid1 } = this.decryptAndHash(hs.ss, message.ns)\n    if (valid1 && ns.length === 32 && isValidPublicKey(ns)) {\n      hs.rs = ns\n    }\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs))\n    const { plaintext, valid: valid2 } = this.decryptAndHash(hs.ss, message.ciphertext)\n    return { plaintext, valid: (valid1 && valid2) }\n  }\n\n  private readMessageB (hs: HandshakeState, message: MessageBuffer): {h: bytes; plaintext: bytes; valid: boolean; cs1: CipherState; cs2: CipherState} {\n    if (isValidPublicKey(message.ne)) {\n      hs.re = message.ne\n    }\n\n    this.mixHash(hs.ss, hs.re)\n    if (!hs.e) {\n      throw new Error('Handshake state should contain ephemeral key by now.')\n    }\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re))\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re))\n    const { plaintext, valid } = this.decryptAndHash(hs.ss, message.ciphertext)\n    const { cs1, cs2 } = this.split(hs.ss)\n\n    return { h: hs.ss.h, valid, plaintext, cs1, cs2 }\n  }\n\n  private initializeInitiator (prologue: bytes32, s: KeyPair, rs: bytes32, psk: bytes32): HandshakeState {\n    const name = 'Noise_IK_25519_ChaChaPoly_SHA256'\n    const ss = this.initializeSymmetric(name)\n    this.mixHash(ss, prologue)\n    this.mixHash(ss, rs)\n    const re = Buffer.alloc(32)\n\n    return { ss, s, rs, re, psk }\n  }\n\n  private initializeResponder (prologue: bytes32, s: KeyPair, rs: bytes32, psk: bytes32): HandshakeState {\n    const name = 'Noise_IK_25519_ChaChaPoly_SHA256'\n    const ss = this.initializeSymmetric(name)\n    this.mixHash(ss, prologue)\n    this.mixHash(ss, s.publicKey)\n    const re = Buffer.alloc(32)\n\n    return { ss, s, rs, re, psk }\n  }\n}\n"]}},"error":null,"hash":"08d96ca6825efc626ebae989d8a87ce9","cacheData":{"env":{}}}