{"id":"node_modules/it-length-prefixed/src/decode.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-length-prefixed/package.json","includedInParent":true,"mtime":1604854663745},{"name":"buffer","loc":{"line":3,"column":27},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-length-prefixed/src/decode.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/node-libs-browser/node_modules/buffer/index.js"},{"name":"bl/BufferList","loc":{"line":4,"column":27},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-length-prefixed/src/decode.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/bl/BufferList.js"},{"name":"./varint-decode","loc":{"line":5,"column":29},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-length-prefixed/src/decode.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-length-prefixed/src/varint-decode.js"}],"generated":{"js":"\n'use strict'\n\nconst { Buffer } = require('buffer')\nconst BufferList = require('bl/BufferList')\nconst varintDecode = require('./varint-decode')\n\n// Maximum length of the length section of the message\nconst MAX_LENGTH_LENGTH = 8 // Varint.encode(Number.MAX_SAFE_INTEGER).length\n// Maximum length of the data section of the message\nconst MAX_DATA_LENGTH = 1024 * 1024 * 4\n\nconst Empty = Buffer.alloc(0)\nconst ReadModes = { LENGTH: 'readLength', DATA: 'readData' }\n\nconst ReadHandlers = {\n  [ReadModes.LENGTH]: (chunk, buffer, state, options) => {\n    // console.log(ReadModes.LENGTH, chunk.length)\n    buffer = buffer.append(chunk)\n\n    let dataLength\n    try {\n      dataLength = options.lengthDecoder(buffer)\n    } catch (err) {\n      if (buffer.length > options.maxLengthLength) {\n        throw Object.assign(err, { message: 'message length too long', code: 'ERR_MSG_LENGTH_TOO_LONG' })\n      }\n      if (err instanceof RangeError) {\n        return { mode: ReadModes.LENGTH, buffer }\n      }\n      throw err\n    }\n\n    if (dataLength > options.maxDataLength) {\n      throw Object.assign(new Error('message data too long'), { code: 'ERR_MSG_DATA_TOO_LONG' })\n    }\n\n    chunk = buffer.shallowSlice(options.lengthDecoder.bytes)\n    buffer = new BufferList()\n\n    if (options.onLength) options.onLength(dataLength)\n\n    if (dataLength <= 0) {\n      if (options.onData) options.onData(Empty)\n      return { mode: ReadModes.LENGTH, chunk, buffer, data: Empty }\n    }\n\n    return { mode: ReadModes.DATA, chunk, buffer, state: { dataLength } }\n  },\n\n  [ReadModes.DATA]: (chunk, buffer, state, options) => {\n    // console.log(ReadModes.DATA, chunk.length)\n    buffer = buffer.append(chunk)\n\n    if (buffer.length < state.dataLength) {\n      return { mode: ReadModes.DATA, buffer, state }\n    }\n\n    const { dataLength } = state\n    const data = buffer.shallowSlice(0, dataLength)\n\n    chunk = buffer.length > dataLength ? buffer.shallowSlice(dataLength) : null\n    buffer = new BufferList()\n\n    if (options.onData) options.onData(data)\n    return { mode: ReadModes.LENGTH, chunk, buffer, data }\n  }\n}\n\nfunction decode (options) {\n  options = options || {}\n  options.lengthDecoder = options.lengthDecoder || varintDecode\n  options.maxLengthLength = options.maxLengthLength || MAX_LENGTH_LENGTH\n  options.maxDataLength = options.maxDataLength || MAX_DATA_LENGTH\n\n  return source => (async function * () {\n    let buffer = new BufferList()\n    let mode = ReadModes.LENGTH // current parsing mode\n    let state // accumulated state for the current mode\n\n    for await (let chunk of source) {\n      // Each chunk may contain multiple messages - keep calling handler for the\n      // current parsing mode until all handlers have consumed the chunk.\n      while (chunk) {\n        const result = ReadHandlers[mode](chunk, buffer, state, options)\n        ;({ mode, chunk, buffer, state } = result)\n        if (result.data) yield result.data\n      }\n    }\n\n    if (buffer.length) {\n      throw Object.assign(new Error('unexpected end of input'), { code: 'ERR_UNEXPECTED_EOF' })\n    }\n  })()\n}\n\ndecode.fromReader = (reader, options) => {\n  options = options || {}\n\n  let byteLength = 1 // Read single byte chunks until the length is known\n  const varByteSource = {\n    [Symbol.asyncIterator] () { return this },\n    next: async () => {\n      try {\n        return await reader.next(byteLength)\n      } catch (err) {\n        if (err.code === 'ERR_UNDER_READ') {\n          return { done: true, value: null }\n        }\n        throw err\n      } finally {\n        // Reset the byteLength so we continue to check for varints\n        byteLength = 1\n      }\n    }\n  }\n\n  // Once the length has been parsed, read chunk for that length\n  options.onLength = l => { byteLength = l }\n  return decode(options)(varByteSource)\n}\n\nmodule.exports = decode\nmodule.exports.MAX_LENGTH_LENGTH = MAX_LENGTH_LENGTH\nmodule.exports.MAX_DATA_LENGTH = MAX_DATA_LENGTH\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/it-length-prefixed/src/decode.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}}],"sources":{"node_modules/it-length-prefixed/src/decode.js":"'use strict'\n\nconst { Buffer } = require('buffer')\nconst BufferList = require('bl/BufferList')\nconst varintDecode = require('./varint-decode')\n\n// Maximum length of the length section of the message\nconst MAX_LENGTH_LENGTH = 8 // Varint.encode(Number.MAX_SAFE_INTEGER).length\n// Maximum length of the data section of the message\nconst MAX_DATA_LENGTH = 1024 * 1024 * 4\n\nconst Empty = Buffer.alloc(0)\nconst ReadModes = { LENGTH: 'readLength', DATA: 'readData' }\n\nconst ReadHandlers = {\n  [ReadModes.LENGTH]: (chunk, buffer, state, options) => {\n    // console.log(ReadModes.LENGTH, chunk.length)\n    buffer = buffer.append(chunk)\n\n    let dataLength\n    try {\n      dataLength = options.lengthDecoder(buffer)\n    } catch (err) {\n      if (buffer.length > options.maxLengthLength) {\n        throw Object.assign(err, { message: 'message length too long', code: 'ERR_MSG_LENGTH_TOO_LONG' })\n      }\n      if (err instanceof RangeError) {\n        return { mode: ReadModes.LENGTH, buffer }\n      }\n      throw err\n    }\n\n    if (dataLength > options.maxDataLength) {\n      throw Object.assign(new Error('message data too long'), { code: 'ERR_MSG_DATA_TOO_LONG' })\n    }\n\n    chunk = buffer.shallowSlice(options.lengthDecoder.bytes)\n    buffer = new BufferList()\n\n    if (options.onLength) options.onLength(dataLength)\n\n    if (dataLength <= 0) {\n      if (options.onData) options.onData(Empty)\n      return { mode: ReadModes.LENGTH, chunk, buffer, data: Empty }\n    }\n\n    return { mode: ReadModes.DATA, chunk, buffer, state: { dataLength } }\n  },\n\n  [ReadModes.DATA]: (chunk, buffer, state, options) => {\n    // console.log(ReadModes.DATA, chunk.length)\n    buffer = buffer.append(chunk)\n\n    if (buffer.length < state.dataLength) {\n      return { mode: ReadModes.DATA, buffer, state }\n    }\n\n    const { dataLength } = state\n    const data = buffer.shallowSlice(0, dataLength)\n\n    chunk = buffer.length > dataLength ? buffer.shallowSlice(dataLength) : null\n    buffer = new BufferList()\n\n    if (options.onData) options.onData(data)\n    return { mode: ReadModes.LENGTH, chunk, buffer, data }\n  }\n}\n\nfunction decode (options) {\n  options = options || {}\n  options.lengthDecoder = options.lengthDecoder || varintDecode\n  options.maxLengthLength = options.maxLengthLength || MAX_LENGTH_LENGTH\n  options.maxDataLength = options.maxDataLength || MAX_DATA_LENGTH\n\n  return source => (async function * () {\n    let buffer = new BufferList()\n    let mode = ReadModes.LENGTH // current parsing mode\n    let state // accumulated state for the current mode\n\n    for await (let chunk of source) {\n      // Each chunk may contain multiple messages - keep calling handler for the\n      // current parsing mode until all handlers have consumed the chunk.\n      while (chunk) {\n        const result = ReadHandlers[mode](chunk, buffer, state, options)\n        ;({ mode, chunk, buffer, state } = result)\n        if (result.data) yield result.data\n      }\n    }\n\n    if (buffer.length) {\n      throw Object.assign(new Error('unexpected end of input'), { code: 'ERR_UNEXPECTED_EOF' })\n    }\n  })()\n}\n\ndecode.fromReader = (reader, options) => {\n  options = options || {}\n\n  let byteLength = 1 // Read single byte chunks until the length is known\n  const varByteSource = {\n    [Symbol.asyncIterator] () { return this },\n    next: async () => {\n      try {\n        return await reader.next(byteLength)\n      } catch (err) {\n        if (err.code === 'ERR_UNDER_READ') {\n          return { done: true, value: null }\n        }\n        throw err\n      } finally {\n        // Reset the byteLength so we continue to check for varints\n        byteLength = 1\n      }\n    }\n  }\n\n  // Once the length has been parsed, read chunk for that length\n  options.onLength = l => { byteLength = l }\n  return decode(options)(varByteSource)\n}\n\nmodule.exports = decode\nmodule.exports.MAX_LENGTH_LENGTH = MAX_LENGTH_LENGTH\nmodule.exports.MAX_DATA_LENGTH = MAX_DATA_LENGTH\n"},"lineCount":126}},"error":null,"hash":"2280d5a4524a9e7667193a3950cb6dcd","cacheData":{"env":{}}}