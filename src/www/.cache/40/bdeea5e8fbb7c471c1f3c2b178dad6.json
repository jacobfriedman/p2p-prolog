{"id":"node_modules/any-signal/index.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/any-signal/package.json","includedInParent":true,"mtime":1604854663661},{"name":"./abort-controller","loc":{"line":1,"column":32},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/any-signal/index.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/any-signal/abort-controller.browser.js"}],"generated":{"js":"const AbortController = require('./abort-controller')\n\n/**\n * Takes an array of AbortSignals and returns a single signal.\n * If any signals are aborted, the returned signal will be aborted.\n * @param {Array<AbortSignal>} signals\n * @returns {AbortSignal}\n */\nfunction anySignal (signals) {\n  const controller = new AbortController()\n\n  function onAbort () {\n    controller.abort()\n\n    for (const signal of signals) {\n      if (!signal || !signal.removeEventListener) continue\n      signal.removeEventListener('abort', onAbort)\n    }\n  }\n\n  for (const signal of signals) {\n    if (!signal || !signal.addEventListener) continue\n    if (signal.aborted) {\n      onAbort()\n      break\n    }\n    signal.addEventListener('abort', onAbort)\n  }\n\n  return controller.signal\n}\n\nmodule.exports = anySignal\nmodule.exports.anySignal = anySignal\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/any-signal/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/any-signal/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}}],"sources":{"node_modules/any-signal/index.js":"const AbortController = require('./abort-controller')\n\n/**\n * Takes an array of AbortSignals and returns a single signal.\n * If any signals are aborted, the returned signal will be aborted.\n * @param {Array<AbortSignal>} signals\n * @returns {AbortSignal}\n */\nfunction anySignal (signals) {\n  const controller = new AbortController()\n\n  function onAbort () {\n    controller.abort()\n\n    for (const signal of signals) {\n      if (!signal || !signal.removeEventListener) continue\n      signal.removeEventListener('abort', onAbort)\n    }\n  }\n\n  for (const signal of signals) {\n    if (!signal || !signal.addEventListener) continue\n    if (signal.aborted) {\n      onAbort()\n      break\n    }\n    signal.addEventListener('abort', onAbort)\n  }\n\n  return controller.signal\n}\n\nmodule.exports = anySignal\nmodule.exports.anySignal = anySignal\n"},"lineCount":35}},"error":null,"hash":"dea8575b964dbd428bb64be7ec1b7b70","cacheData":{"env":{}}}