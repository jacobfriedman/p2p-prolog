{"id":"node_modules/libp2p/src/circuit/protocol/index.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p/package.json","includedInParent":true,"mtime":1604854663741},{"name":"protons","loc":{"line":2,"column":25},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p/src/circuit/protocol/index.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/protons/src/index.js"}],"generated":{"js":"'use strict';\n\nconst protobuf = require('protons');\n\nmodule.exports = protobuf(`\nmessage CircuitRelay {\n\n  enum Status {\n    SUCCESS                    = 100;\n    HOP_SRC_ADDR_TOO_LONG      = 220;\n    HOP_DST_ADDR_TOO_LONG      = 221;\n    HOP_SRC_MULTIADDR_INVALID  = 250;\n    HOP_DST_MULTIADDR_INVALID  = 251;\n    HOP_NO_CONN_TO_DST         = 260;\n    HOP_CANT_DIAL_DST          = 261;\n    HOP_CANT_OPEN_DST_STREAM   = 262;\n    HOP_CANT_SPEAK_RELAY       = 270;\n    HOP_CANT_RELAY_TO_SELF     = 280;\n    STOP_SRC_ADDR_TOO_LONG     = 320;\n    STOP_DST_ADDR_TOO_LONG     = 321;\n    STOP_SRC_MULTIADDR_INVALID = 350;\n    STOP_DST_MULTIADDR_INVALID = 351;\n    STOP_RELAY_REFUSED         = 390;\n    MALFORMED_MESSAGE          = 400;\n  }\n\n  enum Type { // RPC identifier, either HOP, STOP or STATUS\n    HOP = 1;\n    STOP = 2;\n    STATUS = 3;\n    CAN_HOP = 4;\n  }\n\n  message Peer {\n    required bytes id = 1;    // peer id\n    repeated bytes addrs = 2; // peer's known addresses\n  }\n\n  optional Type type = 1;     // Type of the message\n\n  optional Peer srcPeer = 2;  // srcPeer and dstPeer are used when Type is HOP or STATUS\n  optional Peer dstPeer = 3;\n\n  optional Status code = 4;   // Status code, used when Type is STATUS\n}\n`);"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":1,"column":0}},{"generated":{"line":3,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":2,"column":0}},{"name":"protobuf","generated":{"line":3,"column":6},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":2,"column":6}},{"generated":{"line":3,"column":14},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":2,"column":14}},{"name":"require","generated":{"line":3,"column":17},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":2,"column":17}},{"generated":{"line":3,"column":24},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":2,"column":24}},{"generated":{"line":3,"column":25},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":2,"column":25}},{"generated":{"line":3,"column":34},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":2,"column":24}},{"generated":{"line":3,"column":35},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":2,"column":0}},{"name":"module","generated":{"line":5,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":3,"column":0}},{"generated":{"line":5,"column":6},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":3,"column":6}},{"name":"exports","generated":{"line":5,"column":7},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":3,"column":7}},{"generated":{"line":5,"column":14},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":3,"column":0}},{"name":"protobuf","generated":{"line":5,"column":17},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":3,"column":17}},{"generated":{"line":5,"column":25},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":3,"column":25}},{"generated":{"line":5,"column":26},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":3,"column":27}},{"generated":{"line":6,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":4,"column":0}},{"generated":{"line":7,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":5,"column":0}},{"generated":{"line":8,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":6,"column":0}},{"generated":{"line":9,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":7,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":8,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":9,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":10,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":11,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":12,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":13,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":14,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":15,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":16,"column":0}},{"generated":{"line":19,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":17,"column":0}},{"generated":{"line":20,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":18,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":19,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":20,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":21,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":22,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":23,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":24,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":25,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":26,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":27,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":28,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":29,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":30,"column":0}},{"generated":{"line":33,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":31,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":32,"column":0}},{"generated":{"line":35,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":33,"column":0}},{"generated":{"line":36,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":34,"column":0}},{"generated":{"line":37,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":35,"column":0}},{"generated":{"line":38,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":36,"column":0}},{"generated":{"line":39,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":37,"column":0}},{"generated":{"line":40,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":38,"column":0}},{"generated":{"line":41,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":39,"column":0}},{"generated":{"line":42,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":40,"column":0}},{"generated":{"line":43,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":41,"column":0}},{"generated":{"line":44,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":42,"column":0}},{"generated":{"line":45,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":43,"column":0}},{"generated":{"line":46,"column":0},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":44,"column":0}},{"generated":{"line":46,"column":1},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":3,"column":25}},{"generated":{"line":46,"column":2},"source":"node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":3,"column":0}}],"sources":{"node_modules/libp2p/src/circuit/protocol/index.js":"'use strict'\nconst protobuf = require('protons')\nmodule.exports = protobuf(`\nmessage CircuitRelay {\n\n  enum Status {\n    SUCCESS                    = 100;\n    HOP_SRC_ADDR_TOO_LONG      = 220;\n    HOP_DST_ADDR_TOO_LONG      = 221;\n    HOP_SRC_MULTIADDR_INVALID  = 250;\n    HOP_DST_MULTIADDR_INVALID  = 251;\n    HOP_NO_CONN_TO_DST         = 260;\n    HOP_CANT_DIAL_DST          = 261;\n    HOP_CANT_OPEN_DST_STREAM   = 262;\n    HOP_CANT_SPEAK_RELAY       = 270;\n    HOP_CANT_RELAY_TO_SELF     = 280;\n    STOP_SRC_ADDR_TOO_LONG     = 320;\n    STOP_DST_ADDR_TOO_LONG     = 321;\n    STOP_SRC_MULTIADDR_INVALID = 350;\n    STOP_DST_MULTIADDR_INVALID = 351;\n    STOP_RELAY_REFUSED         = 390;\n    MALFORMED_MESSAGE          = 400;\n  }\n\n  enum Type { // RPC identifier, either HOP, STOP or STATUS\n    HOP = 1;\n    STOP = 2;\n    STATUS = 3;\n    CAN_HOP = 4;\n  }\n\n  message Peer {\n    required bytes id = 1;    // peer id\n    repeated bytes addrs = 2; // peer's known addresses\n  }\n\n  optional Type type = 1;     // Type of the message\n\n  optional Peer srcPeer = 2;  // srcPeer and dstPeer are used when Type is HOP or STATUS\n  optional Peer dstPeer = 3;\n\n  optional Status code = 4;   // Status code, used when Type is STATUS\n}\n`)\n"},"lineCount":null}},"error":null,"hash":"8ea2ea4e43bdf4ce4c209135fc3614a0","cacheData":{"env":{}}}