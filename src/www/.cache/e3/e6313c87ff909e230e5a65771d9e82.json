{"id":"node_modules/protons/src/compile/encodings/float.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/protons/package.json","includedInParent":true,"mtime":1604854663745},{"name":"./encoder","loc":{"line":3,"column":24},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/protons/src/compile/encodings/float.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/protons/src/compile/encodings/encoder.js"}],"generated":{"js":"'use strict'\n\nconst encoder = require('./encoder')\n\nfunction floatEncodingLength () {\n  return 4\n}\n\nfunction floatEncode (val, buffer, dataView, offset) {\n  dataView.setFloat32(offset, val, true)\n  floatEncode.bytes = 4\n}\n\nfunction floatDecode (buffer, dataView, offset) {\n  const val = dataView.getFloat32(offset, true)\n  floatDecode.bytes = 4\n\n  return val\n}\n\nmodule.exports = encoder(5, floatEncode, floatDecode, floatEncodingLength)\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/protons/src/compile/encodings/float.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}}],"sources":{"node_modules/protons/src/compile/encodings/float.js":"'use strict'\n\nconst encoder = require('./encoder')\n\nfunction floatEncodingLength () {\n  return 4\n}\n\nfunction floatEncode (val, buffer, dataView, offset) {\n  dataView.setFloat32(offset, val, true)\n  floatEncode.bytes = 4\n}\n\nfunction floatDecode (buffer, dataView, offset) {\n  const val = dataView.getFloat32(offset, true)\n  floatDecode.bytes = 4\n\n  return val\n}\n\nmodule.exports = encoder(5, floatEncode, floatDecode, floatEncodingLength)\n"},"lineCount":22}},"error":null,"hash":"dea9ec63cc23cee01b2edcb2fdb93260","cacheData":{"env":{}}}