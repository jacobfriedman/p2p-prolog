{"id":"node_modules/arraybuffer.slice/index.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/arraybuffer.slice/package.json","includedInParent":true,"mtime":1604854748989}],"generated":{"js":"/**\n * An abstraction for slicing an arraybuffer even when\n * ArrayBuffer.prototype.slice is not supported\n *\n * @api public\n */\n\nmodule.exports = function(arraybuffer, start, end) {\n  var bytes = arraybuffer.byteLength;\n  start = start || 0;\n  end = end || bytes;\n\n  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }\n\n  if (start < 0) { start += bytes; }\n  if (end < 0) { end += bytes; }\n  if (end > bytes) { end = bytes; }\n\n  if (start >= bytes || start >= end || bytes === 0) {\n    return new ArrayBuffer(0);\n  }\n\n  var abv = new Uint8Array(arraybuffer);\n  var result = new Uint8Array(end - start);\n  for (var i = start, ii = 0; i < end; i++, ii++) {\n    result[ii] = abv[i];\n  }\n  return result.buffer;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/arraybuffer.slice/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}}],"sources":{"node_modules/arraybuffer.slice/index.js":"/**\n * An abstraction for slicing an arraybuffer even when\n * ArrayBuffer.prototype.slice is not supported\n *\n * @api public\n */\n\nmodule.exports = function(arraybuffer, start, end) {\n  var bytes = arraybuffer.byteLength;\n  start = start || 0;\n  end = end || bytes;\n\n  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }\n\n  if (start < 0) { start += bytes; }\n  if (end < 0) { end += bytes; }\n  if (end > bytes) { end = bytes; }\n\n  if (start >= bytes || start >= end || bytes === 0) {\n    return new ArrayBuffer(0);\n  }\n\n  var abv = new Uint8Array(arraybuffer);\n  var result = new Uint8Array(end - start);\n  for (var i = start, ii = 0; i < end; i++, ii++) {\n    result[ii] = abv[i];\n  }\n  return result.buffer;\n};\n"},"lineCount":30}},"error":null,"hash":"73d7780d1f6a2997e5f6666a35fb4a2d","cacheData":{"env":{}}}