{"id":"node_modules/uint8arrays/concat.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/uint8arrays/package.json","includedInParent":true,"mtime":1604854663745}],"generated":{"js":"'use strict'\n\n/**\n * Returns a new Uint8Array created by concatenating the passed ArrayLikes\n *\n * @param {Array<ArrayLike<number>>} arrays\n * @param {Number} length\n * @returns {Uint8Array}\n */\nfunction concat (arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0)\n  }\n\n  const output = new Uint8Array(length)\n  let offset = 0\n\n  for (const arr of arrays) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return output\n}\n\nmodule.exports = concat\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/uint8arrays/concat.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/uint8arrays/concat.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}}],"sources":{"node_modules/uint8arrays/concat.js":"'use strict'\n\n/**\n * Returns a new Uint8Array created by concatenating the passed ArrayLikes\n *\n * @param {Array<ArrayLike<number>>} arrays\n * @param {Number} length\n * @returns {Uint8Array}\n */\nfunction concat (arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0)\n  }\n\n  const output = new Uint8Array(length)\n  let offset = 0\n\n  for (const arr of arrays) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return output\n}\n\nmodule.exports = concat\n"},"lineCount":27}},"error":null,"hash":"10539094028911f3762b648471ad9f70","cacheData":{"env":{}}}