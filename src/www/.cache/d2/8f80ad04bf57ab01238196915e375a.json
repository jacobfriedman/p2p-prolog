{"id":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p/package.json","includedInParent":true,"mtime":1604854663741},{"name":"protons","loc":{"line":3,"column":24},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/protons/src/index.js"}],"generated":{"js":"'use strict';\n\nconst protons = require('protons');\n\nconst message = `\nmessage Addresses {\n  // Address represents a single multiaddr.\n  message Address {\n    required bytes multiaddr = 1;\n\n    // Flag to indicate if the address comes from a certified source.\n    optional bool isCertified = 2;\n  }\n\n  // CertifiedRecord contains a serialized signed PeerRecord used to\n  // populate the signedAddrs list.\n  message CertifiedRecord {\n    // The Seq counter from the signed PeerRecord envelope\n    uint64 seq = 1;\n\n    // The serialized bytes of the SignedEnvelope containing the PeerRecord.\n    bytes raw = 2;\n  }\n\n  // The known multiaddrs.\n  repeated Address addrs = 1;\n\n  // The most recently received signed PeerRecord.\n  CertifiedRecord certified_record = 2;\n}\n`;\nmodule.exports = protons(message).Addresses;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":1,"column":0}},{"generated":{"line":3,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":3,"column":0}},{"name":"protons","generated":{"line":3,"column":6},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":3,"column":6}},{"generated":{"line":3,"column":13},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":3,"column":13}},{"name":"require","generated":{"line":3,"column":16},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":3,"column":16}},{"generated":{"line":3,"column":23},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":3,"column":23}},{"generated":{"line":3,"column":24},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":3,"column":24}},{"generated":{"line":3,"column":33},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":3,"column":23}},{"generated":{"line":3,"column":34},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":3,"column":0}},{"generated":{"line":5,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":5,"column":0}},{"name":"message","generated":{"line":5,"column":6},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":5,"column":6}},{"generated":{"line":5,"column":13},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":5,"column":13}},{"generated":{"line":5,"column":16},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":5,"column":17}},{"generated":{"line":6,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":6,"column":0}},{"generated":{"line":7,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":7,"column":0}},{"generated":{"line":8,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":8,"column":0}},{"generated":{"line":9,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":9,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":10,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":11,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":12,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":13,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":14,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":15,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":16,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":17,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":18,"column":0}},{"generated":{"line":19,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":19,"column":0}},{"generated":{"line":20,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":20,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":21,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":22,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":23,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":24,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":25,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":26,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":27,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":28,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":29,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":30,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":31,"column":0}},{"generated":{"line":31,"column":1},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":5,"column":0}},{"name":"module","generated":{"line":32,"column":0},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":33,"column":0}},{"generated":{"line":32,"column":6},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":33,"column":6}},{"name":"exports","generated":{"line":32,"column":7},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":33,"column":7}},{"generated":{"line":32,"column":14},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":33,"column":0}},{"name":"protons","generated":{"line":32,"column":17},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":33,"column":17}},{"generated":{"line":32,"column":24},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":33,"column":24}},{"name":"message","generated":{"line":32,"column":25},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":33,"column":25}},{"generated":{"line":32,"column":32},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":33,"column":24}},{"generated":{"line":32,"column":33},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":33,"column":17}},{"name":"Addresses","generated":{"line":32,"column":34},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":33,"column":34}},{"generated":{"line":32,"column":43},"source":"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js","original":{"line":33,"column":0}}],"sources":{"node_modules/libp2p/src/peer-store/persistent/pb/address-book.proto.js":"'use strict'\n\nconst protons = require('protons')\n\nconst message = `\nmessage Addresses {\n  // Address represents a single multiaddr.\n  message Address {\n    required bytes multiaddr = 1;\n\n    // Flag to indicate if the address comes from a certified source.\n    optional bool isCertified = 2;\n  }\n\n  // CertifiedRecord contains a serialized signed PeerRecord used to\n  // populate the signedAddrs list.\n  message CertifiedRecord {\n    // The Seq counter from the signed PeerRecord envelope\n    uint64 seq = 1;\n\n    // The serialized bytes of the SignedEnvelope containing the PeerRecord.\n    bytes raw = 2;\n  }\n\n  // The known multiaddrs.\n  repeated Address addrs = 1;\n\n  // The most recently received signed PeerRecord.\n  CertifiedRecord certified_record = 2;\n}\n`\n\nmodule.exports = protons(message).Addresses\n"},"lineCount":null}},"error":null,"hash":"857d02ff45f8cb6934c50e7e32f8bf3e","cacheData":{"env":{}}}