{"id":"node_modules/libp2p-websockets/src/socket-to-conn.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-websockets/package.json","includedInParent":true,"mtime":1604854741185},{"name":"abortable-iterator","loc":{"line":3,"column":26},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-websockets/src/socket-to-conn.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/abortable-iterator/index.js"},{"name":"./constants","loc":{"line":4,"column":34},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-websockets/src/socket-to-conn.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-websockets/src/constants.js"},{"name":"libp2p-utils/src/ip-port-to-multiaddr","loc":{"line":5,"column":28},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-websockets/src/socket-to-conn.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-utils/src/ip-port-to-multiaddr.js"},{"name":"p-timeout","loc":{"line":7,"column":25},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-websockets/src/socket-to-conn.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/p-timeout/index.js"},{"name":"debug","loc":{"line":9,"column":22},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-websockets/src/socket-to-conn.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/debug/src/browser.js"}],"generated":{"js":"'use strict'\n\nconst abortable = require('abortable-iterator')\nconst { CLOSE_TIMEOUT } = require('./constants')\nconst toMultiaddr = require('libp2p-utils/src/ip-port-to-multiaddr')\n\nconst pTimeout = require('p-timeout')\n\nconst debug = require('debug')\nconst log = debug('libp2p:websockets:socket')\nlog.error = debug('libp2p:websockets:socket:error')\n\n// Convert a stream into a MultiaddrConnection\n// https://github.com/libp2p/interface-transport#multiaddrconnection\nmodule.exports = (stream, options = {}) => {\n  const maConn = {\n    async sink (source) {\n      if (options.signal) {\n        source = abortable(source, options.signal)\n      }\n\n      try {\n        await stream.sink((async function * () {\n          for await (const chunk of source) {\n            // Convert BufferList to Buffer\n            yield chunk instanceof Uint8Array ? chunk : chunk.slice()\n          }\n        })())\n      } catch (err) {\n        if (err.type !== 'aborted') {\n          log.error(err)\n        }\n      }\n    },\n\n    source: options.signal ? abortable(stream.source, options.signal) : stream.source,\n\n    conn: stream,\n\n    localAddr: options.localAddr || (stream.localAddress && stream.localPort\n      ? toMultiaddr(stream.localAddress, stream.localPort) : undefined),\n\n    // If the remote address was passed, use it - it may have the peer ID encapsulated\n    remoteAddr: options.remoteAddr || toMultiaddr(stream.remoteAddress, stream.remotePort),\n\n    timeline: { open: Date.now() },\n\n    async close () {\n      const start = Date.now()\n\n      try {\n        await pTimeout(stream.close(), CLOSE_TIMEOUT)\n      } catch (err) {\n        const { host, port } = maConn.remoteAddr.toOptions()\n        log('timeout closing stream to %s:%s after %dms, destroying it manually',\n          host, port, Date.now() - start)\n\n        stream.destroy()\n      } finally {\n        maConn.timeline.close = Date.now()\n      }\n    }\n  }\n\n  stream.socket.once && stream.socket.once('close', () => {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now()\n    }\n  })\n\n  return maConn\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/libp2p-websockets/src/socket-to-conn.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}}],"sources":{"node_modules/libp2p-websockets/src/socket-to-conn.js":"'use strict'\n\nconst abortable = require('abortable-iterator')\nconst { CLOSE_TIMEOUT } = require('./constants')\nconst toMultiaddr = require('libp2p-utils/src/ip-port-to-multiaddr')\n\nconst pTimeout = require('p-timeout')\n\nconst debug = require('debug')\nconst log = debug('libp2p:websockets:socket')\nlog.error = debug('libp2p:websockets:socket:error')\n\n// Convert a stream into a MultiaddrConnection\n// https://github.com/libp2p/interface-transport#multiaddrconnection\nmodule.exports = (stream, options = {}) => {\n  const maConn = {\n    async sink (source) {\n      if (options.signal) {\n        source = abortable(source, options.signal)\n      }\n\n      try {\n        await stream.sink((async function * () {\n          for await (const chunk of source) {\n            // Convert BufferList to Buffer\n            yield chunk instanceof Uint8Array ? chunk : chunk.slice()\n          }\n        })())\n      } catch (err) {\n        if (err.type !== 'aborted') {\n          log.error(err)\n        }\n      }\n    },\n\n    source: options.signal ? abortable(stream.source, options.signal) : stream.source,\n\n    conn: stream,\n\n    localAddr: options.localAddr || (stream.localAddress && stream.localPort\n      ? toMultiaddr(stream.localAddress, stream.localPort) : undefined),\n\n    // If the remote address was passed, use it - it may have the peer ID encapsulated\n    remoteAddr: options.remoteAddr || toMultiaddr(stream.remoteAddress, stream.remotePort),\n\n    timeline: { open: Date.now() },\n\n    async close () {\n      const start = Date.now()\n\n      try {\n        await pTimeout(stream.close(), CLOSE_TIMEOUT)\n      } catch (err) {\n        const { host, port } = maConn.remoteAddr.toOptions()\n        log('timeout closing stream to %s:%s after %dms, destroying it manually',\n          host, port, Date.now() - start)\n\n        stream.destroy()\n      } finally {\n        maConn.timeline.close = Date.now()\n      }\n    }\n  }\n\n  stream.socket.once && stream.socket.once('close', () => {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now()\n    }\n  })\n\n  return maConn\n}\n"},"lineCount":76}},"error":null,"hash":"183f69e04ddb6e3b4d390982c9d7f47e","cacheData":{"env":{}}}