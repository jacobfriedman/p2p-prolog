{"id":"node_modules/libp2p-mplex/src/coder/encode.browser.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/package.json","includedInParent":true,"mtime":1604854753633},{"name":"varint","loc":{"line":3,"column":23},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/coder/encode.browser.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/varint/index.js"},{"name":"bl/BufferList","loc":{"line":4,"column":27},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/coder/encode.browser.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/bl/BufferList.js"}],"generated":{"js":"'use strict'\n\nconst varint = require('varint')\nconst BufferList = require('bl/BufferList')\n\nconst POOL_SIZE = 10 * 1024\n\nclass Encoder {\n  constructor () {\n    this._pool = new Uint8Array(POOL_SIZE)\n    this._poolOffset = 0\n  }\n\n  /**\n   * Encodes the given message and returns it and its header\n   *\n   * @param {*} msg - The message object to encode\n   * @returns {Uint8Array|Uint8Array[]}\n   */\n  write (msg) {\n    const pool = this._pool\n    let offset = this._poolOffset\n\n    varint.encode(msg.id << 3 | msg.type, pool, offset)\n    offset += varint.encode.bytes\n    varint.encode(msg.data ? msg.data.length : 0, pool, offset)\n    offset += varint.encode.bytes\n\n    const header = pool.subarray(this._poolOffset, offset)\n\n    if (POOL_SIZE - offset < 100) {\n      this._pool = new Uint8Array(POOL_SIZE)\n      this._poolOffset = 0\n    } else {\n      this._poolOffset = offset\n    }\n\n    if (!msg.data) return header\n\n    return [header, msg.data]\n  }\n}\n\nconst encoder = new Encoder()\n\n// Encode one or more messages and yield a BufferList of encoded messages\nmodule.exports = source => (async function * encode () {\n  for await (const msg of source) {\n    if (Array.isArray(msg)) {\n      yield new BufferList(msg.map(m => encoder.write(m)))\n    } else {\n      yield new BufferList(encoder.write(msg))\n    }\n  }\n})()\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/libp2p-mplex/src/coder/encode.browser.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}}],"sources":{"node_modules/libp2p-mplex/src/coder/encode.browser.js":"'use strict'\n\nconst varint = require('varint')\nconst BufferList = require('bl/BufferList')\n\nconst POOL_SIZE = 10 * 1024\n\nclass Encoder {\n  constructor () {\n    this._pool = new Uint8Array(POOL_SIZE)\n    this._poolOffset = 0\n  }\n\n  /**\n   * Encodes the given message and returns it and its header\n   *\n   * @param {*} msg - The message object to encode\n   * @returns {Uint8Array|Uint8Array[]}\n   */\n  write (msg) {\n    const pool = this._pool\n    let offset = this._poolOffset\n\n    varint.encode(msg.id << 3 | msg.type, pool, offset)\n    offset += varint.encode.bytes\n    varint.encode(msg.data ? msg.data.length : 0, pool, offset)\n    offset += varint.encode.bytes\n\n    const header = pool.subarray(this._poolOffset, offset)\n\n    if (POOL_SIZE - offset < 100) {\n      this._pool = new Uint8Array(POOL_SIZE)\n      this._poolOffset = 0\n    } else {\n      this._poolOffset = offset\n    }\n\n    if (!msg.data) return header\n\n    return [header, msg.data]\n  }\n}\n\nconst encoder = new Encoder()\n\n// Encode one or more messages and yield a BufferList of encoded messages\nmodule.exports = source => (async function * encode () {\n  for await (const msg of source) {\n    if (Array.isArray(msg)) {\n      yield new BufferList(msg.map(m => encoder.write(m)))\n    } else {\n      yield new BufferList(encoder.write(msg))\n    }\n  }\n})()\n"},"lineCount":56}},"error":null,"hash":"78c50d56ffcc7f2c370e79ae62112703","cacheData":{"env":{}}}