{"id":"node_modules/multistream-select/src/handle.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/package.json","includedInParent":true,"mtime":1604854663745},{"name":"debug","loc":{"line":3,"column":20},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/handle.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/debug/src/browser.js"},{"name":"bl/BufferList","loc":{"line":4,"column":27},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/handle.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/bl/BufferList.js"},{"name":"./multistream","loc":{"line":5,"column":28},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/handle.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/multistream.js"},{"name":"it-handshake","loc":{"line":6,"column":26},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/handle.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-handshake/src/index.js"},{"name":"./constants","loc":{"line":7,"column":32},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/handle.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/constants.js"}],"generated":{"js":"'use strict'\n\nconst log = require('debug')('mss:handle')\nconst BufferList = require('bl/BufferList')\nconst multistream = require('./multistream')\nconst handshake = require('it-handshake')\nconst { PROTOCOL_ID } = require('./constants')\n\nmodule.exports = async (stream, protocols) => {\n  protocols = Array.isArray(protocols) ? protocols : [protocols]\n  const { writer, reader, rest, stream: shakeStream } = handshake(stream)\n\n  while (true) {\n    const protocol = (await multistream.read(reader)).toString()\n    log('read \"%s\"', protocol)\n\n    if (protocol === PROTOCOL_ID) {\n      log('respond with \"%s\" for \"%s\"', PROTOCOL_ID, protocol)\n      multistream.write(writer, PROTOCOL_ID)\n      continue\n    }\n\n    if (protocols.includes(protocol)) {\n      multistream.write(writer, protocol)\n      log('respond with \"%s\" for \"%s\"', protocol, protocol)\n      rest()\n      return { stream: shakeStream, protocol }\n    }\n\n    if (protocol === 'ls') {\n      // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\\n\n      multistream.write(writer, new BufferList(\n        protocols.map(p => multistream.encode(p))\n      ))\n      log('respond with \"%s\" for %s', protocols, protocol)\n      continue\n    }\n\n    multistream.write(writer, 'na')\n    log('respond with \"na\" for \"%s\"', protocol)\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/multistream-select/src/handle.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/multistream-select/src/handle.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}}],"sources":{"node_modules/multistream-select/src/handle.js":"'use strict'\n\nconst log = require('debug')('mss:handle')\nconst BufferList = require('bl/BufferList')\nconst multistream = require('./multistream')\nconst handshake = require('it-handshake')\nconst { PROTOCOL_ID } = require('./constants')\n\nmodule.exports = async (stream, protocols) => {\n  protocols = Array.isArray(protocols) ? protocols : [protocols]\n  const { writer, reader, rest, stream: shakeStream } = handshake(stream)\n\n  while (true) {\n    const protocol = (await multistream.read(reader)).toString()\n    log('read \"%s\"', protocol)\n\n    if (protocol === PROTOCOL_ID) {\n      log('respond with \"%s\" for \"%s\"', PROTOCOL_ID, protocol)\n      multistream.write(writer, PROTOCOL_ID)\n      continue\n    }\n\n    if (protocols.includes(protocol)) {\n      multistream.write(writer, protocol)\n      log('respond with \"%s\" for \"%s\"', protocol, protocol)\n      rest()\n      return { stream: shakeStream, protocol }\n    }\n\n    if (protocol === 'ls') {\n      // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\\n\n      multistream.write(writer, new BufferList(\n        protocols.map(p => multistream.encode(p))\n      ))\n      log('respond with \"%s\" for %s', protocols, protocol)\n      continue\n    }\n\n    multistream.write(writer, 'na')\n    log('respond with \"na\" for \"%s\"', protocol)\n  }\n}\n"},"lineCount":43}},"error":null,"hash":"783b62f26e8efa6baf34efc6509ac22a","cacheData":{"env":{}}}