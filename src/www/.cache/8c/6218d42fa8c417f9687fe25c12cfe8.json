{"id":"node_modules/multistream-select/src/ls.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/package.json","includedInParent":true,"mtime":1604854663745},{"name":"it-reader","loc":{"line":3,"column":23},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/ls.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-reader/index.js"},{"name":"debug","loc":{"line":4,"column":20},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/ls.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/debug/src/browser.js"},{"name":"./multistream","loc":{"line":5,"column":28},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/ls.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/multistream.js"},{"name":"it-handshake","loc":{"line":6,"column":26},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/ls.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-handshake/src/index.js"},{"name":"it-length-prefixed","loc":{"line":7,"column":19},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/ls.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-length-prefixed/src/index.js"},{"name":"it-pipe","loc":{"line":8,"column":21},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/ls.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-pipe/index.js"}],"generated":{"js":"'use strict'\n\nconst Reader = require('it-reader')\nconst log = require('debug')('it-multistream-select:ls')\nconst multistream = require('./multistream')\nconst handshake = require('it-handshake')\nconst lp = require('it-length-prefixed')\nconst pipe = require('it-pipe')\n\nmodule.exports = async stream => {\n  const { reader, writer, rest, stream: shakeStream } = handshake(stream)\n\n  log('write \"ls\"')\n  multistream.write(writer, 'ls')\n  rest()\n\n  // Next message from remote will be (e.g. for 2 protocols):\n  // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\n  const res = await multistream.read(reader)\n\n  // After reading response we have:\n  // <varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\n  const protocolsReader = Reader([res])\n  const protocols = []\n\n  // Decode each of the protocols from the reader\n  await pipe(\n    protocolsReader,\n    lp.decode(),\n    async source => {\n      for await (const protocol of source) {\n        // Remove the newline\n        protocols.push(protocol.shallowSlice(0, -1).toString())\n      }\n    }\n  )\n\n  return { stream: shakeStream, protocols }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/multistream-select/src/ls.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/multistream-select/src/ls.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}}],"sources":{"node_modules/multistream-select/src/ls.js":"'use strict'\n\nconst Reader = require('it-reader')\nconst log = require('debug')('it-multistream-select:ls')\nconst multistream = require('./multistream')\nconst handshake = require('it-handshake')\nconst lp = require('it-length-prefixed')\nconst pipe = require('it-pipe')\n\nmodule.exports = async stream => {\n  const { reader, writer, rest, stream: shakeStream } = handshake(stream)\n\n  log('write \"ls\"')\n  multistream.write(writer, 'ls')\n  rest()\n\n  // Next message from remote will be (e.g. for 2 protocols):\n  // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\n  const res = await multistream.read(reader)\n\n  // After reading response we have:\n  // <varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\n  const protocolsReader = Reader([res])\n  const protocols = []\n\n  // Decode each of the protocols from the reader\n  await pipe(\n    protocolsReader,\n    lp.decode(),\n    async source => {\n      for await (const protocol of source) {\n        // Remove the newline\n        protocols.push(protocol.shallowSlice(0, -1).toString())\n      }\n    }\n  )\n\n  return { stream: shakeStream, protocols }\n}\n"},"lineCount":40}},"error":null,"hash":"76c217935eca2b7d8a6e8396667e3f92","cacheData":{"env":{}}}