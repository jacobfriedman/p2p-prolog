{"id":"node_modules/it-length-prefixed/src/int32BE-encode.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-length-prefixed/package.json","includedInParent":true,"mtime":1604854663745},{"name":"buffer","loc":{"line":3,"column":27},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-length-prefixed/src/int32BE-encode.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/node-libs-browser/node_modules/buffer/index.js"}],"generated":{"js":"\n'use strict'\n\nconst { Buffer } = require('buffer')\n\nconst int32BEEncode = (value, target, offset) => {\n  target = target || Buffer.allocUnsafe(4)\n  target.writeInt32BE(value, offset)\n  return target\n}\n\nint32BEEncode.bytes = 4 // Always because fixed length\n\nmodule.exports = int32BEEncode\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/it-length-prefixed/src/int32BE-encode.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}}],"sources":{"node_modules/it-length-prefixed/src/int32BE-encode.js":"'use strict'\n\nconst { Buffer } = require('buffer')\n\nconst int32BEEncode = (value, target, offset) => {\n  target = target || Buffer.allocUnsafe(4)\n  target.writeInt32BE(value, offset)\n  return target\n}\n\nint32BEEncode.bytes = 4 // Always because fixed length\n\nmodule.exports = int32BEEncode\n"},"lineCount":15}},"error":null,"hash":"3a8277212d629feca9e8d8fe11603700","cacheData":{"env":{}}}