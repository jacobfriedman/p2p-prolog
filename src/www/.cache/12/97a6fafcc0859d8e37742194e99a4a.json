{"id":"node_modules/multistream-select/src/multistream.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/package.json","includedInParent":true,"mtime":1604854663745},{"name":"bl/BufferList","loc":{"line":3,"column":27},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/multistream.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/bl/BufferList.js"},{"name":"it-length-prefixed","loc":{"line":4,"column":19},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/multistream.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-length-prefixed/src/index.js"},{"name":"it-pipe","loc":{"line":5,"column":21},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/multistream.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-pipe/index.js"},{"name":"err-code","loc":{"line":6,"column":24},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/multistream.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/err-code/index.js"},{"name":"uint8arrays/from-string","loc":{"line":7,"column":37},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multistream-select/src/multistream.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/uint8arrays/from-string.js"}],"generated":{"js":"'use strict'\n\nconst BufferList = require('bl/BufferList')\nconst lp = require('it-length-prefixed')\nconst pipe = require('it-pipe')\nconst errCode = require('err-code')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\nconst NewLine = uint8ArrayFromString('\\n')\n\nasync function oneChunk (source) {\n  for await (const chunk of source) return chunk // We only need one!\n}\n\nexports.encode = buffer => lp.encode.single(new BufferList([buffer, NewLine]))\n\n// `write` encodes and writes a single buffer\nexports.write = (writer, buffer) => writer.push(exports.encode(buffer))\n\n// `writeAll` behaves like `write`, except it encodes an array of items as a single write\nexports.writeAll = (writer, buffers) => {\n  writer.push(buffers.reduce((bl, buffer) => bl.append(exports.encode(buffer)), new BufferList()))\n}\n\nexports.read = async reader => {\n  let byteLength = 1 // Read single byte chunks until the length is known\n  const varByteSource = { // No return impl - we want the reader to remain readable\n    [Symbol.asyncIterator] () { return this },\n    next: () => reader.next(byteLength)\n  }\n\n  // Once the length has been parsed, read chunk for that length\n  const onLength = l => { byteLength = l }\n  const buf = await pipe(varByteSource, lp.decode({ onLength }), oneChunk)\n\n  if (buf.get(buf.length - 1) !== NewLine[0]) {\n    throw errCode(new Error('missing newline'), 'ERR_INVALID_MULTISTREAM_SELECT_MESSAGE')\n  }\n\n  return buf.shallowSlice(0, -1) // Remove newline\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/multistream-select/src/multistream.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}}],"sources":{"node_modules/multistream-select/src/multistream.js":"'use strict'\n\nconst BufferList = require('bl/BufferList')\nconst lp = require('it-length-prefixed')\nconst pipe = require('it-pipe')\nconst errCode = require('err-code')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\nconst NewLine = uint8ArrayFromString('\\n')\n\nasync function oneChunk (source) {\n  for await (const chunk of source) return chunk // We only need one!\n}\n\nexports.encode = buffer => lp.encode.single(new BufferList([buffer, NewLine]))\n\n// `write` encodes and writes a single buffer\nexports.write = (writer, buffer) => writer.push(exports.encode(buffer))\n\n// `writeAll` behaves like `write`, except it encodes an array of items as a single write\nexports.writeAll = (writer, buffers) => {\n  writer.push(buffers.reduce((bl, buffer) => bl.append(exports.encode(buffer)), new BufferList()))\n}\n\nexports.read = async reader => {\n  let byteLength = 1 // Read single byte chunks until the length is known\n  const varByteSource = { // No return impl - we want the reader to remain readable\n    [Symbol.asyncIterator] () { return this },\n    next: () => reader.next(byteLength)\n  }\n\n  // Once the length has been parsed, read chunk for that length\n  const onLength = l => { byteLength = l }\n  const buf = await pipe(varByteSource, lp.decode({ onLength }), oneChunk)\n\n  if (buf.get(buf.length - 1) !== NewLine[0]) {\n    throw errCode(new Error('missing newline'), 'ERR_INVALID_MULTISTREAM_SELECT_MESSAGE')\n  }\n\n  return buf.shallowSlice(0, -1) // Remove newline\n}\n"},"lineCount":42}},"error":null,"hash":"030bfaabb4db2e156991dad515391ed8","cacheData":{"env":{}}}