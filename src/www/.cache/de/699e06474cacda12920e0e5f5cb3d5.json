{"id":"node_modules/libp2p-mplex/src/stream.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/package.json","includedInParent":true,"mtime":1604854753633},{"name":"abortable-iterator","loc":{"line":3,"column":26},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/stream.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/abortable-iterator/index.js"},{"name":"abort-controller","loc":{"line":4,"column":32},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/stream.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/abort-controller/browser.js"},{"name":"debug","loc":{"line":5,"column":20},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/stream.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/debug/src/browser.js"},{"name":"it-pushable","loc":{"line":6,"column":25},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/stream.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-pushable/index.js"},{"name":"bl/BufferList","loc":{"line":7,"column":27},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/stream.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/bl/BufferList.js"},{"name":"err-code","loc":{"line":8,"column":24},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/stream.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/err-code/index.js"},{"name":"./restrict-size","loc":{"line":9,"column":33},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/stream.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/restrict-size.js"},{"name":"./message-types","loc":{"line":10,"column":64},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/stream.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/libp2p-mplex/src/message-types.js"}],"generated":{"js":"'use strict'\n\nconst abortable = require('abortable-iterator')\nconst AbortController = require('abort-controller')\nconst log = require('debug')('libp2p:mplex:stream')\nconst pushable = require('it-pushable')\nconst BufferList = require('bl/BufferList')\nconst errCode = require('err-code')\nconst { MAX_MSG_SIZE } = require('./restrict-size')\nconst { InitiatorMessageTypes, ReceiverMessageTypes } = require('./message-types')\n\nconst ERR_MPLEX_STREAM_RESET = 'ERR_MPLEX_STREAM_RESET'\nconst ERR_MPLEX_STREAM_ABORT = 'ERR_MPLEX_STREAM_ABORT'\n\n/**\n * @param {object} options\n * @param {number} options.id\n * @param {string} options.name\n * @param {function(*)} options.send - Called to send data through the stream\n * @param {function(Error)} [options.onEnd] - Called whenever the stream ends\n * @param {string} [options.type] - One of ['initiator','receiver']. Defaults to 'initiator'\n * @param {number} [options.maxMsgSize] - Max size of an mplex message in bytes. Writes > size are automatically split. Defaults to 1MB\n * @returns {*} A muxed stream\n */\nmodule.exports = ({ id, name, send, onEnd = () => {}, type = 'initiator', maxMsgSize = MAX_MSG_SIZE }) => {\n  const abortController = new AbortController()\n  const resetController = new AbortController()\n  const Types = type === 'initiator' ? InitiatorMessageTypes : ReceiverMessageTypes\n  const externalId = type === 'initiator' ? (`i${id}`) : `r${id}`\n\n  name = String(name == null ? id : name)\n\n  let sourceEnded = false\n  let sinkEnded = false\n  let endErr\n\n  const onSourceEnd = err => {\n    if (sourceEnded) return\n    sourceEnded = true\n    log('%s stream %s source end', type, name, err)\n    if (err && !endErr) endErr = err\n    if (sinkEnded) {\n      stream.timeline.close = Date.now()\n      onEnd(endErr)\n    }\n  }\n\n  const onSinkEnd = err => {\n    if (sinkEnded) return\n    sinkEnded = true\n    log('%s stream %s sink end', type, name, err)\n    if (err && !endErr) endErr = err\n    if (sourceEnded) {\n      stream.timeline.close = Date.now()\n      onEnd(endErr)\n    }\n  }\n\n  const stream = {\n    // Close for reading\n    close: () => stream.source.end(),\n    // Close for reading and writing (local error)\n    abort: err => {\n      log('%s stream %s abort', type, name, err)\n      // End the source with the passed error\n      stream.source.end(err)\n      abortController.abort()\n      onSinkEnd(err)\n    },\n    // Close immediately for reading and writing (remote error)\n    reset: () => {\n      const err = errCode(new Error('stream reset'), ERR_MPLEX_STREAM_RESET)\n      resetController.abort()\n      stream.source.end(err)\n      onSinkEnd(err)\n    },\n    sink: async source => {\n      source = abortable(source, [\n        { signal: abortController.signal, options: { abortMessage: 'stream aborted', abortCode: ERR_MPLEX_STREAM_ABORT } },\n        { signal: resetController.signal, options: { abortMessage: 'stream reset', abortCode: ERR_MPLEX_STREAM_RESET } }\n      ])\n\n      if (type === 'initiator') { // If initiator, open a new stream\n        send({ id, type: Types.NEW_STREAM, data: name })\n      }\n\n      try {\n        for await (let data of source) {\n          while (data.length) {\n            if (data.length <= maxMsgSize) {\n              send({ id, type: Types.MESSAGE, data })\n              break\n            }\n            data = BufferList.isBufferList(data) ? data : new BufferList(data)\n            send({ id, type: Types.MESSAGE, data: data.shallowSlice(0, maxMsgSize) })\n            data.consume(maxMsgSize)\n          }\n        }\n      } catch (err) {\n        // Send no more data if this stream was remotely reset\n        if (err.code === ERR_MPLEX_STREAM_RESET) {\n          log('%s stream %s reset', type, name)\n        } else {\n          log('%s stream %s error', type, name, err)\n          send({ id, type: Types.RESET })\n        }\n\n        stream.source.end(err)\n        return onSinkEnd(err)\n      }\n\n      send({ id, type: Types.CLOSE })\n      onSinkEnd()\n    },\n    source: pushable(onSourceEnd),\n    timeline: {\n      open: Date.now(),\n      close: null\n    },\n    id: externalId\n  }\n\n  return stream\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/libp2p-mplex/src/stream.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}}],"sources":{"node_modules/libp2p-mplex/src/stream.js":"'use strict'\n\nconst abortable = require('abortable-iterator')\nconst AbortController = require('abort-controller')\nconst log = require('debug')('libp2p:mplex:stream')\nconst pushable = require('it-pushable')\nconst BufferList = require('bl/BufferList')\nconst errCode = require('err-code')\nconst { MAX_MSG_SIZE } = require('./restrict-size')\nconst { InitiatorMessageTypes, ReceiverMessageTypes } = require('./message-types')\n\nconst ERR_MPLEX_STREAM_RESET = 'ERR_MPLEX_STREAM_RESET'\nconst ERR_MPLEX_STREAM_ABORT = 'ERR_MPLEX_STREAM_ABORT'\n\n/**\n * @param {object} options\n * @param {number} options.id\n * @param {string} options.name\n * @param {function(*)} options.send - Called to send data through the stream\n * @param {function(Error)} [options.onEnd] - Called whenever the stream ends\n * @param {string} [options.type] - One of ['initiator','receiver']. Defaults to 'initiator'\n * @param {number} [options.maxMsgSize] - Max size of an mplex message in bytes. Writes > size are automatically split. Defaults to 1MB\n * @returns {*} A muxed stream\n */\nmodule.exports = ({ id, name, send, onEnd = () => {}, type = 'initiator', maxMsgSize = MAX_MSG_SIZE }) => {\n  const abortController = new AbortController()\n  const resetController = new AbortController()\n  const Types = type === 'initiator' ? InitiatorMessageTypes : ReceiverMessageTypes\n  const externalId = type === 'initiator' ? (`i${id}`) : `r${id}`\n\n  name = String(name == null ? id : name)\n\n  let sourceEnded = false\n  let sinkEnded = false\n  let endErr\n\n  const onSourceEnd = err => {\n    if (sourceEnded) return\n    sourceEnded = true\n    log('%s stream %s source end', type, name, err)\n    if (err && !endErr) endErr = err\n    if (sinkEnded) {\n      stream.timeline.close = Date.now()\n      onEnd(endErr)\n    }\n  }\n\n  const onSinkEnd = err => {\n    if (sinkEnded) return\n    sinkEnded = true\n    log('%s stream %s sink end', type, name, err)\n    if (err && !endErr) endErr = err\n    if (sourceEnded) {\n      stream.timeline.close = Date.now()\n      onEnd(endErr)\n    }\n  }\n\n  const stream = {\n    // Close for reading\n    close: () => stream.source.end(),\n    // Close for reading and writing (local error)\n    abort: err => {\n      log('%s stream %s abort', type, name, err)\n      // End the source with the passed error\n      stream.source.end(err)\n      abortController.abort()\n      onSinkEnd(err)\n    },\n    // Close immediately for reading and writing (remote error)\n    reset: () => {\n      const err = errCode(new Error('stream reset'), ERR_MPLEX_STREAM_RESET)\n      resetController.abort()\n      stream.source.end(err)\n      onSinkEnd(err)\n    },\n    sink: async source => {\n      source = abortable(source, [\n        { signal: abortController.signal, options: { abortMessage: 'stream aborted', abortCode: ERR_MPLEX_STREAM_ABORT } },\n        { signal: resetController.signal, options: { abortMessage: 'stream reset', abortCode: ERR_MPLEX_STREAM_RESET } }\n      ])\n\n      if (type === 'initiator') { // If initiator, open a new stream\n        send({ id, type: Types.NEW_STREAM, data: name })\n      }\n\n      try {\n        for await (let data of source) {\n          while (data.length) {\n            if (data.length <= maxMsgSize) {\n              send({ id, type: Types.MESSAGE, data })\n              break\n            }\n            data = BufferList.isBufferList(data) ? data : new BufferList(data)\n            send({ id, type: Types.MESSAGE, data: data.shallowSlice(0, maxMsgSize) })\n            data.consume(maxMsgSize)\n          }\n        }\n      } catch (err) {\n        // Send no more data if this stream was remotely reset\n        if (err.code === ERR_MPLEX_STREAM_RESET) {\n          log('%s stream %s reset', type, name)\n        } else {\n          log('%s stream %s error', type, name, err)\n          send({ id, type: Types.RESET })\n        }\n\n        stream.source.end(err)\n        return onSinkEnd(err)\n      }\n\n      send({ id, type: Types.CLOSE })\n      onSinkEnd()\n    },\n    source: pushable(onSourceEnd),\n    timeline: {\n      open: Date.now(),\n      close: null\n    },\n    id: externalId\n  }\n\n  return stream\n}\n"},"lineCount":125}},"error":null,"hash":"e14837a049066b536b836da6735c3a5c","cacheData":{"env":{}}}