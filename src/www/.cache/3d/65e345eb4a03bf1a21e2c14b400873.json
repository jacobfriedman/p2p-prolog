{"id":"node_modules/get-iterator/index.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/get-iterator/package.json","includedInParent":true,"mtime":1604854663665}],"generated":{"js":"// If the passed object is an (async) iterable, then get the iterator\n// If it's probably an iterator already (i.e. has next function) return it\n// else throw\nmodule.exports = function getIterator (obj) {\n  if (obj) {\n    if (typeof obj[Symbol.iterator] === 'function') {\n      return obj[Symbol.iterator]()\n    }\n    if (typeof obj[Symbol.asyncIterator] === 'function') {\n      return obj[Symbol.asyncIterator]()\n    }\n    if (typeof obj.next === 'function') {\n      return obj // probably an iterator\n    }\n  }\n  throw new Error('argument is not an iterator or iterable')\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/get-iterator/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/get-iterator/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/get-iterator/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/get-iterator/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/get-iterator/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/get-iterator/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/get-iterator/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/get-iterator/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/get-iterator/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/get-iterator/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/get-iterator/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/get-iterator/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/get-iterator/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/get-iterator/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/get-iterator/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/get-iterator/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/get-iterator/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/get-iterator/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}}],"sources":{"node_modules/get-iterator/index.js":"// If the passed object is an (async) iterable, then get the iterator\n// If it's probably an iterator already (i.e. has next function) return it\n// else throw\nmodule.exports = function getIterator (obj) {\n  if (obj) {\n    if (typeof obj[Symbol.iterator] === 'function') {\n      return obj[Symbol.iterator]()\n    }\n    if (typeof obj[Symbol.asyncIterator] === 'function') {\n      return obj[Symbol.asyncIterator]()\n    }\n    if (typeof obj.next === 'function') {\n      return obj // probably an iterator\n    }\n  }\n  throw new Error('argument is not an iterator or iterable')\n}\n"},"lineCount":18}},"error":null,"hash":"bcf873ef640fac42e7c316e1337cbaa9","cacheData":{"env":{}}}