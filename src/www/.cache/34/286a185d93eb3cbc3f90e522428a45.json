{"id":"node_modules/it-pair/index.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-pair/package.json","includedInParent":true,"mtime":1604854663845},{"name":"get-iterator","loc":{"line":3,"column":28},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/it-pair/index.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/get-iterator/index.js"}],"generated":{"js":"'use strict'\n\nconst getIterator = require('get-iterator')\n\n// a pair of streams where one drains from the other\nmodule.exports = function pair () {\n  let _source, onSource\n\n  const sink = async source => {\n    if (_source) throw new Error('already piped')\n    _source = getIterator(source)\n    if (onSource) onSource(_source)\n  }\n\n  const source = {\n    [Symbol.asyncIterator] () {\n      return this\n    },\n    next () {\n      if (_source) return _source.next()\n      return new Promise(resolve => {\n        onSource = source => {\n          onSource = null\n          resolve(source.next())\n        }\n      })\n    }\n  }\n\n  return { sink, source }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/it-pair/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/it-pair/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}}],"sources":{"node_modules/it-pair/index.js":"'use strict'\n\nconst getIterator = require('get-iterator')\n\n// a pair of streams where one drains from the other\nmodule.exports = function pair () {\n  let _source, onSource\n\n  const sink = async source => {\n    if (_source) throw new Error('already piped')\n    _source = getIterator(source)\n    if (onSource) onSource(_source)\n  }\n\n  const source = {\n    [Symbol.asyncIterator] () {\n      return this\n    },\n    next () {\n      if (_source) return _source.next()\n      return new Promise(resolve => {\n        onSource = source => {\n          onSource = null\n          resolve(source.next())\n        }\n      })\n    }\n  }\n\n  return { sink, source }\n}\n"},"lineCount":32}},"error":null,"hash":"4ab19985c0a4d46205f56a9a1dac880d","cacheData":{"env":{}}}