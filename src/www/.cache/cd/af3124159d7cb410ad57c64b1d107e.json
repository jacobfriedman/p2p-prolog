{"id":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multicodec/node_modules/uint8arrays/package.json","includedInParent":true,"mtime":1604854663745},{"name":"multibase/src/constants","loc":{"line":3,"column":26},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multicodec/node_modules/uint8arrays/from-string.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multibase/src/constants.js"},{"name":"web-encoding","loc":{"line":4,"column":32},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multicodec/node_modules/uint8arrays/from-string.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/web-encoding/src/lib.browser.js"}],"generated":{"js":"'use strict'\n\nconst { names } = require('multibase/src/constants')\nconst { TextEncoder } = require('web-encoding')\nconst utf8Encoder = new TextEncoder()\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * @param {String} string\n * @param {String} [encoding=utf8] utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n * @see {@link https://www.npmjs.com/package/multibase|multibase} for supported encodings other than `utf8`\n */\nfunction fromString (string, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Encoder.encode(string)\n  }\n\n  const codec = names[encoding]\n\n  if (!codec) {\n    throw new Error('Unknown base')\n  }\n\n  return codec.decode(string)\n}\n\nmodule.exports = fromString\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/multicodec/node_modules/uint8arrays/from-string.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}}],"sources":{"node_modules/multicodec/node_modules/uint8arrays/from-string.js":"'use strict'\n\nconst { names } = require('multibase/src/constants')\nconst { TextEncoder } = require('web-encoding')\nconst utf8Encoder = new TextEncoder()\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * @param {String} string\n * @param {String} [encoding=utf8] utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n * @see {@link https://www.npmjs.com/package/multibase|multibase} for supported encodings other than `utf8`\n */\nfunction fromString (string, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Encoder.encode(string)\n  }\n\n  const codec = names[encoding]\n\n  if (!codec) {\n    throw new Error('Unknown base')\n  }\n\n  return codec.decode(string)\n}\n\nmodule.exports = fromString\n"},"lineCount":30}},"error":null,"hash":"5a42b2d1283f29cf33d7ace2e155e148","cacheData":{"env":{}}}