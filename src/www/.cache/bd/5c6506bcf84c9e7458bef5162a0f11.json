{"id":"node_modules/uint8arrays/to-string.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/uint8arrays/package.json","includedInParent":true,"mtime":1604854663745},{"name":"multibase/src/constants","loc":{"line":3,"column":26},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/uint8arrays/to-string.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/multibase/src/constants.js"},{"name":"web-encoding","loc":{"line":4,"column":32},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/uint8arrays/to-string.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/web-encoding/src/lib.browser.js"}],"generated":{"js":"'use strict'\n\nconst { names } = require('multibase/src/constants')\nconst { TextDecoder } = require('web-encoding')\nconst utf8Decoder = new TextDecoder('utf8')\n\n/**\n * Turns a Uint8Array of bytes into a string with each\n * character being the char code of the corresponding byte\n *\n * @param {Uint8Array} array The array to turn into a string\n * @returns {String}\n */\nfunction uint8ArrayToAsciiString (array) {\n  let string = ''\n\n  for (let i = 0; i < array.length; i++) {\n    string += String.fromCharCode(array[i])\n  }\n  return string\n}\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {Uint8Array} array The array to turn into a string\n * @param {String} [encoding=utf8] The encoding to use\n * @returns {String}\n * @see {@link https://www.npmjs.com/package/multibase|multibase} for supported encodings other than `utf8`\n */\nfunction toString (array, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Decoder.decode(array)\n  }\n\n  if (encoding === 'ascii') {\n    return uint8ArrayToAsciiString(array)\n  }\n\n  const codec = names[encoding]\n\n  if (!codec) {\n    throw new Error('Unknown base')\n  }\n\n  return codec.encode(array)\n}\n\nmodule.exports = toString\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/uint8arrays/to-string.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}}],"sources":{"node_modules/uint8arrays/to-string.js":"'use strict'\n\nconst { names } = require('multibase/src/constants')\nconst { TextDecoder } = require('web-encoding')\nconst utf8Decoder = new TextDecoder('utf8')\n\n/**\n * Turns a Uint8Array of bytes into a string with each\n * character being the char code of the corresponding byte\n *\n * @param {Uint8Array} array The array to turn into a string\n * @returns {String}\n */\nfunction uint8ArrayToAsciiString (array) {\n  let string = ''\n\n  for (let i = 0; i < array.length; i++) {\n    string += String.fromCharCode(array[i])\n  }\n  return string\n}\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {Uint8Array} array The array to turn into a string\n * @param {String} [encoding=utf8] The encoding to use\n * @returns {String}\n * @see {@link https://www.npmjs.com/package/multibase|multibase} for supported encodings other than `utf8`\n */\nfunction toString (array, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Decoder.decode(array)\n  }\n\n  if (encoding === 'ascii') {\n    return uint8ArrayToAsciiString(array)\n  }\n\n  const codec = names[encoding]\n\n  if (!codec) {\n    throw new Error('Unknown base')\n  }\n\n  return codec.encode(array)\n}\n\nmodule.exports = toString\n"},"lineCount":54}},"error":null,"hash":"08baf31a88c099355110c778aaf6880f","cacheData":{"env":{}}}