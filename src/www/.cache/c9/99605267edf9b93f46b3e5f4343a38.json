{"id":"node_modules/protons/src/compile/encodings/bytes.js","dependencies":[{"name":"/home/jacob/projects/p2p-prolog/src/www/package.json","includedInParent":true,"mtime":1604858341685},{"name":"/home/jacob/projects/p2p-prolog/src/www/node_modules/protons/package.json","includedInParent":true,"mtime":1604854663745},{"name":"varint","loc":{"line":3,"column":23},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/protons/src/compile/encodings/bytes.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/varint/index.js"},{"name":"./encoder","loc":{"line":4,"column":24},"parent":"/home/jacob/projects/p2p-prolog/src/www/node_modules/protons/src/compile/encodings/bytes.js","resolved":"/home/jacob/projects/p2p-prolog/src/www/node_modules/protons/src/compile/encodings/encoder.js"}],"generated":{"js":"'use strict'\n\nconst varint = require('varint')\nconst encoder = require('./encoder')\n\nfunction bytesBufferLength (val) {\n  return val.byteLength\n}\n\nfunction bytesEncodingLength (val) {\n  const len = bytesBufferLength(val)\n  return varint.encodingLength(len) + len\n}\n\nfunction bytesEncode (val, buffer, dataView, offset) {\n  const oldOffset = offset\n  const len = bytesBufferLength(val)\n\n  varint.encode(len, buffer, offset)\n  offset += varint.encode.bytes\n\n  buffer.set(val, offset)\n  offset += len\n\n  bytesEncode.bytes = offset - oldOffset\n}\n\nfunction bytesDecode (buffer, dataView, offset) {\n  const oldOffset = offset\n\n  const len = varint.decode(buffer, offset)\n  offset += varint.decode.bytes\n\n  const val = buffer.slice(offset, offset + len)\n  offset += val.length\n\n  bytesDecode.bytes = offset - oldOffset\n\n  return val\n}\n\nmodule.exports = encoder(2, bytesEncode, bytesDecode, bytesEncodingLength)\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/protons/src/compile/encodings/bytes.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}}],"sources":{"node_modules/protons/src/compile/encodings/bytes.js":"'use strict'\n\nconst varint = require('varint')\nconst encoder = require('./encoder')\n\nfunction bytesBufferLength (val) {\n  return val.byteLength\n}\n\nfunction bytesEncodingLength (val) {\n  const len = bytesBufferLength(val)\n  return varint.encodingLength(len) + len\n}\n\nfunction bytesEncode (val, buffer, dataView, offset) {\n  const oldOffset = offset\n  const len = bytesBufferLength(val)\n\n  varint.encode(len, buffer, offset)\n  offset += varint.encode.bytes\n\n  buffer.set(val, offset)\n  offset += len\n\n  bytesEncode.bytes = offset - oldOffset\n}\n\nfunction bytesDecode (buffer, dataView, offset) {\n  const oldOffset = offset\n\n  const len = varint.decode(buffer, offset)\n  offset += varint.decode.bytes\n\n  const val = buffer.slice(offset, offset + len)\n  offset += val.length\n\n  bytesDecode.bytes = offset - oldOffset\n\n  return val\n}\n\nmodule.exports = encoder(2, bytesEncode, bytesDecode, bytesEncodingLength)\n"},"lineCount":43}},"error":null,"hash":"ea4c89f935fe5c56cdff1525a1113a70","cacheData":{"env":{}}}